// <auto-generated />
using System;
using GRRWS.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GRRWS.Infrastructure.Migrations
{
    [DbContext(typeof(GRRWSContext))]
    partial class GRRWSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GRRWS.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("DeviceId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("DeviceId", "ErrorId");

                    b.ToTable("DeviceErrorHistories");

                    b.HasData(
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6629),
                            Id = new Guid("004708e2-ec46-41a2-a2a8-9ea12d1b10bb"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Mỏ trói chỉ bị lỏng, đã điều chỉnh lực siết.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6637),
                            Id = new Guid("6a9f51c1-8005-4e12-9dd5-3de91c9bafb2"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Động cơ cháy do quá tải, cần thay mô tơ mới.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6644),
                            Id = new Guid("24488424-edde-44d0-b82f-f436d32d25b2"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị chập điện, đang chờ phụ tùng thay thế.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6648),
                            Id = new Guid("a06e92c6-a137-4218-bf83-b390d4eca04e"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim lệch tâm, đã căn chỉnh lại trục kim.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6650),
                            Id = new Guid("4f109e6e-763a-4dc2-82d1-87efb339a190"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Bánh răng mòn gây tiếng ồn, đã lên kế hoạch thay mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6654),
                            Id = new Guid("6627fd9e-e94e-47f1-9c23-913da9cff8ac"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Bo mạch điều khiển lỗi, đang kiểm tra để sửa chữa.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6658),
                            Id = new Guid("dd1863dd-13a8-4315-ba8d-73d3f2f730a3"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Bulong lỏng ở bộ truyền, đã siết chặt lại.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6660),
                            Id = new Guid("c77ed434-82d8-41f7-a8ce-5a856b4eb7dd"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Cảm biến vải không nhận, đã thay cảm biến mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6664),
                            Id = new Guid("5a85b72f-08ae-4c12-be22-7e8c22e6d68d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị cháy, đang chờ thay thế phụ tùng.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(6666),
                            Id = new Guid("549bf79a-222d-4029-9b38-e0bda5ef661f"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Bộ cấp vải hoạt động không đều, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("DeviceId", "IssueId");

                    b.HasIndex("IssueId");

                    b.HasIndex("DeviceId", "IssueId");

                    b.ToTable("DeviceIssueHistories");

                    b.HasData(
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9038),
                            Id = new Guid("3c94c907-7c9d-4441-b2bb-d741e519f2b7"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ bị đứt do kẹt ở ống chỉ, đã thay ống chỉ mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9044),
                            Id = new Guid("660d4615-aa3e-4584-95aa-2f2d5648de3e"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy do lỗi động cơ, đang chờ sửa chữa.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9054),
                            Id = new Guid("96fe3871-2079-4756-ba13-feae22a2d928"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy ngừng hoạt động, kiểm tra phát hiện lỗi dây điện.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9057),
                            Id = new Guid("336bb25f-6629-42d6-9d2f-34e2f6f3040d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim gãy do sử dụng sai loại kim, đã thay kim phù hợp.",
                            OccurrenceCount = 4
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9059),
                            Id = new Guid("d8835be8-4746-4cd7-ac11-34b571f00f70"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Tiếng ồn lớn do bánh răng mòn, cần thay thế.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9062),
                            Id = new Guid("f008f630-78a3-4ab5-81c1-bcd47bd26b9d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Đèn báo lỗi sáng, kiểm tra mạch điện tử đang được tiến hành.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9065),
                            Id = new Guid("02bf0387-1f1c-493f-95fb-872e444afc25"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ không đều do bulong lỏng, đã siết lại.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9067),
                            Id = new Guid("62e0030d-1fcb-4115-863e-d8818d99168d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ dưới không kéo lên, kiểm tra cảm biến và thay mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9070),
                            Id = new Guid("f39c48b0-e2d8-402c-b799-26953dda08e2"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy, kiểm tra phát hiện lỗi mô tơ.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9073),
                            Id = new Guid("c55ca1d7-0b25-4d48-8ae8-c6619769824d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Vải bị nhăn do điều chỉnh áp suất không đúng, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("TaskId");

                    b.ToTable("ErrorDetails", (string)null);

                    b.HasData(
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0001-0001-0001-300000000001"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            TaskId = new Guid("b1c2d3e4-0002-0002-0002-100000000002")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0002-0002-0002-300000000002"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            TaskId = new Guid("b1c2d3e4-0004-0004-0004-100000000004")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0003-0003-0003-300000000003"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            TaskId = new Guid("b1c2d3e4-0008-0008-0008-100000000008")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0004-0004-0004-300000000004"),
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            TaskId = new Guid("b1c2d3e4-0009-0009-0009-100000000009")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0005-0005-0005-300000000005"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0006-0006-0006-300000000006"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            TaskId = new Guid("b1c2d3e4-0002-0002-0002-100000000002")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0007-0007-0007-300000000007"),
                            ErrorId = new Guid("e1d1addd-0011-0011-0011-000000000011")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0008-0008-0008-300000000008"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            TaskId = new Guid("b1c2d3e4-0010-0010-0010-100000000010")
                        },
                        new
                        {
                            ReportId = new Guid("e1f2a3b4-0009-0009-0009-300000000009"),
                            ErrorId = new Guid("e1d1a136-0028-0028-0028-000000000028")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparepartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int");

                    b.HasKey("ErrorId", "SparepartId");

                    b.HasIndex("SparepartId");

                    b.ToTable("ErrorSpareparts");

                    b.HasData(
                        new
                        {
                            ErrorId = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000003"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000002"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000007"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000009"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a999-0009-0009-0009-000000000009"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000017"),
                            QuantityNeeded = 3
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000013"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000019"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000015"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000024"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000001"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a136-0028-0028-0028-000000000028"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000020"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000007"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000001"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000006"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000012"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000027"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000028"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000021"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000029"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000014"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000008"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000030"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000026"),
                            QuantityNeeded = 1
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IssueId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.ToTable("IssueErrors", (string)null);

                    b.HasData(
                        new
                        {
                            IssueId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ErrorId = new Guid("e1d1a123-0015-0015-0015-000000000015"),
                            Id = new Guid("aaac1814-a74e-4d87-85b4-bd491c894985")
                        },
                        new
                        {
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            Id = new Guid("960b8979-b4fd-4c60-bde0-f46ca0881260")
                        },
                        new
                        {
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            Id = new Guid("f5e91542-b7bd-4f21-a6c4-cd8d1aab5554")
                        },
                        new
                        {
                            IssueId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ErrorId = new Guid("e1d1a666-0006-0006-0006-000000000006"),
                            Id = new Guid("5ac0aaa7-5f65-4497-bd05-d6e274e5f37f")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("e1d1addd-0011-0011-0011-000000000011"),
                            Id = new Guid("6fb97681-25c0-4372-8358-91a5cb557252")
                        },
                        new
                        {
                            IssueId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ErrorId = new Guid("e1d1aeee-0012-0012-0012-000000000012"),
                            Id = new Guid("dc6a99c3-d847-4a59-88ed-e702eea1160a")
                        },
                        new
                        {
                            IssueId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            Id = new Guid("3a18b908-b08e-4d76-b885-a8b3ba86ffb7")
                        },
                        new
                        {
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            Id = new Guid("09712b14-d10e-4509-90cb-b12815aab911")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            Id = new Guid("ac4f4881-a6ff-4a0c-b318-1e4c9881ebf1")
                        },
                        new
                        {
                            IssueId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ErrorId = new Guid("e1d1a333-0003-0003-0003-000000000003"),
                            Id = new Guid("111b1c09-f589-442a-9074-cc0e2067d564")
                        },
                        new
                        {
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            Id = new Guid("8ca08dcc-f299-4408-a85b-3910562e5825")
                        },
                        new
                        {
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            Id = new Guid("36205a62-fbfb-42ac-b92f-b6708e3a86b6")
                        },
                        new
                        {
                            IssueId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ErrorId = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            Id = new Guid("83d446a7-ac15-4333-8d2a-0b16ce1b56e6")
                        },
                        new
                        {
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            Id = new Guid("835ce18a-79d8-44fa-b4d9-0cc61c1b207e")
                        },
                        new
                        {
                            IssueId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            Id = new Guid("23cfdd31-1172-452e-8b83-3515d4c27525")
                        },
                        new
                        {
                            IssueId = new Guid("23232323-2323-2323-2323-232323232323"),
                            ErrorId = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            Id = new Guid("bcc5fb79-6f7d-459e-b2e1-813552277f5f")
                        },
                        new
                        {
                            IssueId = new Guid("23232323-2323-2323-2323-232323232323"),
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            Id = new Guid("02cc68ba-a5ef-401e-81e4-cb0e40c568dd")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            Id = new Guid("6e129b97-ef16-47c1-b5d5-59368b1bd1ea")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            Id = new Guid("0121cef8-7d01-45bd-8601-f7b43756c377")
                        },
                        new
                        {
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            Id = new Guid("aca1e4c3-1541-4701-ab71-88d268c45663")
                        },
                        new
                        {
                            IssueId = new Guid("12121212-1212-1212-1212-121212121212"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            Id = new Guid("2e520c0b-6f37-4485-bdec-eedfb41da569")
                        },
                        new
                        {
                            IssueId = new Guid("12121212-1212-1212-1212-121212121212"),
                            ErrorId = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            Id = new Guid("783b1ab1-a7ba-4211-a969-f2ce6ca044a2")
                        },
                        new
                        {
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            Id = new Guid("1a814f02-f3e6-4a87-a311-a3088f76c354")
                        },
                        new
                        {
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            ErrorId = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            Id = new Guid("8bf17ac5-d961-45bb-8932-dff4924c8706")
                        },
                        new
                        {
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            Id = new Guid("fe0fd05e-59f9-4580-9b7a-3861f23f2e85")
                        },
                        new
                        {
                            IssueId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            Id = new Guid("81a50f72-1421-4257-ba37-6fca9d3b4d61")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            Id = new Guid("e3951290-cf4a-4b00-b070-723ed4252b5e")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            Id = new Guid("c769d254-d011-4338-9862-673e79c272f3")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            Id = new Guid("3d23d839-a558-459a-817c-1a61cc532f27")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("MachineId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("MachineId", "ErrorId");

                    b.ToTable("MachineErrorHistories");

                    b.HasData(
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1848),
                            Id = new Guid("ddf424a2-7d1f-4bbd-b667-be5a200e029d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Mỏ trói chỉ bị lỏng, đã điều chỉnh lực siết.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1856),
                            Id = new Guid("78cc7b6e-511d-42c2-b94d-90f2380101f1"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Động cơ cháy do quá tải, cần thay mô tơ mới.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1858),
                            Id = new Guid("821a5841-68ce-4a7d-b5bb-e9edc3aebca4"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị chập điện, đang chờ phụ tùng thay thế.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1860),
                            Id = new Guid("737c5a00-55a0-49ba-aea2-f17fdcc1aa72"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim lệch tâm, đã căn chỉnh lại trục kim.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1863),
                            Id = new Guid("429fb2ca-8a49-44fc-92cd-822c4113de91"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Bánh răng mòn gây tiếng ồn, đã lên kế hoạch thay mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1865),
                            Id = new Guid("537e83d6-78ca-4c35-af1e-1d6d066c2613"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Bo mạch điều khiển lỗi, đang kiểm tra để sửa chữa.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1868),
                            Id = new Guid("865eb029-b15b-4c77-a493-177314dbfdec"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Bulong lỏng ở bộ truyền, đã siết chặt lại.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1870),
                            Id = new Guid("c18a8250-9fb0-4ef7-aec6-9c14a07d4452"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Cảm biến vải không nhận, đã thay cảm biến mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1872),
                            Id = new Guid("3f8b3f82-196c-4fba-b1f4-9d551c73c974"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị cháy, đang chờ thay thế phụ tùng.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(1877),
                            Id = new Guid("0bc8b224-eb83-47e0-93a4-8ed24a4ba0f2"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Bộ cấp vải hoạt động không đều, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("MachineId", "IssueId");

                    b.HasIndex("IssueId");

                    b.HasIndex("MachineId", "IssueId");

                    b.ToTable("MachineIssueHistories");

                    b.HasData(
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4349),
                            Id = new Guid("03f1a1cf-1201-430d-bb94-c08659def9f0"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ bị đứt do kẹt ở ống chỉ, đã thay ống chỉ mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4354),
                            Id = new Guid("eaa24662-9d86-48d7-b12f-c92016dd9e7d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy do lỗi động cơ, đang chờ sửa chữa.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4357),
                            Id = new Guid("65f6125f-f6ee-447a-9147-7829b9b3c03c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy ngừng hoạt động, kiểm tra phát hiện lỗi dây điện.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4359),
                            Id = new Guid("48effd16-60a2-47a6-a4b8-eed6fd635b13"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim gãy do sử dụng sai loại kim, đã thay kim phù hợp.",
                            OccurrenceCount = 4
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4361),
                            Id = new Guid("8118690d-a354-4ef0-8132-cc7692692df6"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Tiếng ồn lớn do bánh răng mòn, cần thay thế.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4363),
                            Id = new Guid("55285a08-44bd-45e9-b949-9639347a9b82"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Đèn báo lỗi sáng, kiểm tra mạch điện tử đang được tiến hành.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4365),
                            Id = new Guid("aab0d30f-4aa4-4a64-93a3-1a0f82747204"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ không đều do bulong lỏng, đã siết lại.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4370),
                            Id = new Guid("ce69a83b-4304-41ee-96ad-8dfefcd5408f"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ dưới không kéo lên, kiểm tra cảm biến và thay mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4372),
                            Id = new Guid("96e9858a-79e6-4408-9918-d390ed3c03d5"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy, kiểm tra phát hiện lỗi mô tơ.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4375),
                            Id = new Guid("f2a12c9a-553d-4a43-a354-7f03c0b565fc"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Vải bị nhăn do điều chỉnh áp suất không đúng, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.Property<Guid>("SpareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpareId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("RepairSpareparts", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("RequestId", "IssueId")
                        .IsUnique();

                    b.ToTable("RequestIssues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a2b3c4-0001-0001-0001-800000000001"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RequestId = new Guid("a1f2e3d4-0002-0002-1002-000000000002"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0002-0002-0002-800000000002"),
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RequestId = new Guid("a1f2e3d4-0003-0003-1003-000000000003"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0003-0003-0003-800000000003"),
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            RequestId = new Guid("a1f2e3d4-0005-0005-1005-000000000005"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0004-0004-0004-800000000004"),
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            RequestId = new Guid("a1f2e3d4-0006-0006-1006-000000000006"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0005-0005-0005-800000000005"),
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RequestId = new Guid("a1f2e3d4-0008-0008-1008-000000000008"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0006-0006-0006-800000000006"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RequestId = new Guid("a1f2e3d4-0009-0009-1009-000000000009"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0007-0007-0007-800000000007"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            RequestId = new Guid("a1f2e3d4-0011-0011-1011-000000000011"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0008-0008-0008-800000000008"),
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            RequestId = new Guid("a1f2e3d4-0013-0013-1013-000000000013"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("f1a2b3c4-0009-0009-0009-800000000009"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            RequestId = new Guid("a1f2e3d4-0015-0015-1015-000000000015"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AreaCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Areas_AreaCode")
                        .HasFilter("[AreaCode] IS NOT NULL");

                    b.ToTable("Areas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3930),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3930),
                            AreaCode = "SXA",
                            AreaName = "Khu Sản Xuất Chính A"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3933),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3933),
                            AreaCode = "SXB",
                            AreaName = "Khu Sản Xuất Chính B"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3935),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3936),
                            AreaCode = "KKT",
                            AreaName = "Khu Kiểm Tra Chất Lượng"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3938),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3938),
                            AreaCode = "KCV",
                            AreaName = "Khu Cắt Vải"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3940),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3940),
                            AreaCode = "KTV",
                            AreaName = "Khu Thêu"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3942),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3943),
                            AreaCode = "KLK",
                            AreaName = "Khu Lưu Kho Thiết Bị"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUnderWarranty")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Devices_DeviceCode")
                        .HasFilter("[DeviceCode] IS NOT NULL");

                    b.HasIndex("MachineId");

                    b.ToTable("Devices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3731),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3731),
                            Description = "Máy may kim đơn tốc độ cao cho vải nhẹ.",
                            DeviceCode = "DEV001-JUKI-DDL8700-01",
                            DeviceName = "Juki DDL-8700 Unit 1",
                            InstallationDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            ManufactureDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0001-0001-0001-000000000001"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D001",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3737),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3738),
                            Description = "Máy may kim đơn tốc độ cao cho vải trung bình.",
                            DeviceCode = "DEV002-JUKI-DDL8700-02",
                            DeviceName = "Juki DDL-8700 Unit 2",
                            InstallationDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0002-0002-0002-000000000002"),
                            ManufactureDate = new DateTime(2020, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0002-0002-0002-000000000002"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D002",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3745),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3746),
                            Description = "Máy may kim đơn tốc độ cao, đang sửa chữa.",
                            DeviceCode = "DEV003-JUKI-DDL8700-03",
                            DeviceName = "Juki DDL-8700 Unit 3",
                            InstallationDate = new DateTime(2020, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            ManufactureDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_03.jpg",
                            PositionId = new Guid("f1e2d3c4-0014-0014-0014-000000000014"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D003",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "InRepair",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3751),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3752),
                            Description = "Máy may kim đơn tốc độ cao cho vải cotton.",
                            DeviceCode = "DEV004-JUKI-DDL8700-04",
                            DeviceName = "Juki DDL-8700 Unit 4",
                            InstallationDate = new DateTime(2020, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            ManufactureDate = new DateTime(2020, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_04.jpg",
                            PositionId = new Guid("f1e2d3c4-0003-0003-0003-000000000003"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D004",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3757),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3757),
                            Description = "Máy may kim đơn tốc độ cao cho vải tổng hợp.",
                            DeviceCode = "DEV005-JUKI-DDL8700-05",
                            DeviceName = "Juki DDL-8700 Unit 5",
                            InstallationDate = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0005-0005-0005-000000000005"),
                            ManufactureDate = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_05.jpg",
                            PositionId = new Guid("f1e2d3c4-0004-0004-0004-000000000004"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D005",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3763),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3763),
                            Description = "Máy may kim đơn tốc độ cao, đã ngừng sử dụng.",
                            DeviceCode = "DEV006-JUKI-DDL8700-06",
                            DeviceName = "Juki DDL-8700 Unit 6",
                            InstallationDate = new DateTime(2020, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0006-0006-0006-000000000006"),
                            ManufactureDate = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_06.jpg",
                            PositionId = new Guid("f1e2d3c4-0015-0015-0015-000000000015"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D006",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Retired",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666667"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3769),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3770),
                            Description = "Compact sewing machine",
                            DeviceCode = "SM004",
                            DeviceName = "Sewing Machine 4",
                            InstallationDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "Model F",
                            PhotoUrl = "http://example.com/photos/sm004.jpg",
                            PurchasePrice = 1000.00m,
                            SerialNumber = "SN006",
                            Specifications = "{\"speed\": \"800 SPM\", \"type\": \"Compact\"}",
                            Status = "Active",
                            Supplier = "Brother Industries"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3775),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3776),
                            Description = "Máy may kim đơn tốc độ cao cho vải dày.",
                            DeviceCode = "DEV007-JUKI-DDL8700-07",
                            DeviceName = "Juki DDL-8700 Unit 7",
                            InstallationDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            ManufactureDate = new DateTime(2020, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_07.jpg",
                            PositionId = new Guid("f1e2d3c4-0006-0006-0006-000000000006"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D007",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3781),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3781),
                            Description = "Máy may kim đơn tốc độ cao cho vải mỏng.",
                            DeviceCode = "DEV008-JUKI-DDL8700-08",
                            DeviceName = "Juki DDL-8700 Unit 8",
                            InstallationDate = new DateTime(2020, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            ManufactureDate = new DateTime(2020, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_08.jpg",
                            PositionId = new Guid("f1e2d3c4-0007-0007-0007-000000000007"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D008",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3786),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3787),
                            Description = "Máy may kim đơn tốc độ cao cho vải hỗn hợp.",
                            DeviceCode = "DEV009-JUKI-DDL8700-09",
                            DeviceName = "Juki DDL-8700 Unit 9",
                            InstallationDate = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0009-0009-0009-000000000009"),
                            ManufactureDate = new DateTime(2020, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_09.jpg",
                            PositionId = new Guid("f1e2d3c4-0010-0010-0010-000000000010"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D009",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3793),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3794),
                            Description = "Máy may kim đơn tốc độ cao cho mục đích chung.",
                            DeviceCode = "DEV010-JUKI-DDL8700-10",
                            DeviceName = "Juki DDL-8700 Unit 10",
                            InstallationDate = new DateTime(2020, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0010-0010-0010-000000000010"),
                            ManufactureDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_10.jpg",
                            PositionId = new Guid("f1e2d3c4-0011-0011-0011-000000000011"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D010",
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3799),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3799),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động, đơn vị 1.",
                            DeviceCode = "DEV011-JUKI-DDL9000C-01",
                            DeviceName = "Juki DDL-9000C Unit 1",
                            InstallationDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            ManufactureDate = new DateTime(2022, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0008-0008-0008-000000000008"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D001",
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3806),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3806),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động, đơn vị 2.",
                            DeviceCode = "DEV012-JUKI-DDL9000C-02",
                            DeviceName = "Juki DDL-9000C Unit 2",
                            InstallationDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0012-0012-0012-000000000012"),
                            ManufactureDate = new DateTime(2022, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0012-0012-0012-000000000012"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D002",
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3812),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3812),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động, đang sửa chữa.",
                            DeviceCode = "DEV013-JUKI-DDL9000C-03",
                            DeviceName = "Juki DDL-9000C Unit 3",
                            InstallationDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            ManufactureDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_03.jpg",
                            PositionId = new Guid("f1e2d3c4-0028-0028-0028-000000000028"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D003",
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động",
                            Status = "InRepair",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3817),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3818),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động, đơn vị 4.",
                            DeviceCode = "DEV014-JUKI-DDL9000C-04",
                            DeviceName = "Juki DDL-9000C Unit 4",
                            InstallationDate = new DateTime(2022, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0014-0014-0014-000000000014"),
                            ManufactureDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_04.jpg",
                            PositionId = new Guid("f1e2d3c4-0013-0013-0013-000000000013"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D004",
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3824),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3825),
                            Description = "Máy vắt sổ 3 chỉ cho vải nhẹ.",
                            DeviceCode = "DEV015-BROTHER-B957-01",
                            DeviceName = "Brother B957 Unit 1",
                            InstallationDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            ManufactureDate = new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/device_brother_b957_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0019-0019-0019-000000000019"),
                            PurchasePrice = 12000000m,
                            SerialNumber = "B957-D001",
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3830),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3830),
                            Description = "Máy vắt sổ 3 chỉ cho vải tổng hợp.",
                            DeviceCode = "DEV016-BROTHER-B957-02",
                            DeviceName = "Brother B957 Unit 2",
                            InstallationDate = new DateTime(2019, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0016-0016-0016-000000000016"),
                            ManufactureDate = new DateTime(2019, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/device_brother_b957_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0020-0020-0020-000000000020"),
                            PurchasePrice = 12000000m,
                            SerialNumber = "B957-D002",
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3835),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3835),
                            Description = "Máy vắt sổ 3 chỉ cho vải mỏng.",
                            DeviceCode = "DEV017-BROTHER-B957-03",
                            DeviceName = "Brother B957 Unit 3",
                            InstallationDate = new DateTime(2019, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0017-0017-0017-000000000017"),
                            ManufactureDate = new DateTime(2019, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/device_brother_b957_03.jpg",
                            PositionId = new Guid("f1e2d3c4-0021-0011-0021-000000000021"),
                            PurchasePrice = 12000000m,
                            SerialNumber = "B957-D003",
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3873),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3874),
                            Description = "Máy may nặng cho vải denim.",
                            DeviceCode = "DEV018-SINGER-4452-01",
                            DeviceName = "Singer 4452 Unit 1",
                            InstallationDate = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            ManufactureDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/device_singer_4452_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0023-0023-0023-000000000023"),
                            PurchasePrice = 18000000m,
                            SerialNumber = "S4452-D001",
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm",
                            Status = "Active",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3885),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3885),
                            Description = "Máy may nặng cho vải da.",
                            DeviceCode = "DEV019-SINGER-4452-02",
                            DeviceName = "Singer 4452 Unit 2",
                            InstallationDate = new DateTime(2021, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0019-0019-0019-000000000019"),
                            ManufactureDate = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/device_singer_4452_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0024-0024-0024-000000000024"),
                            PurchasePrice = 18000000m,
                            SerialNumber = "S4452-D002",
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm",
                            Status = "Active",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3890),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3891),
                            Description = "Máy may nặng cho vải canvas, đang sửa chữa.",
                            DeviceCode = "DEV020-SINGER-4452-03",
                            DeviceName = "Singer 4452 Unit 3",
                            InstallationDate = new DateTime(2021, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            ManufactureDate = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/device_singer_4452_03.jpg",
                            PositionId = new Guid("f1e2d3c4-0029-0029-0029-000000000029"),
                            PurchasePrice = 18000000m,
                            SerialNumber = "S4452-D003",
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm",
                            Status = "InRepair",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3896),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3897),
                            Description = "Máy vắt sổ 4 chỉ tốc độ cao cho vải cotton và tổng hợp.",
                            DeviceCode = "DEV021-JUKI-MO6714S-01",
                            DeviceName = "Juki MO-6714S Unit 1",
                            InstallationDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0021-0021-0021-000000000021"),
                            ManufactureDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "MO-6714S",
                            PhotoUrl = "https://example.com/photos/device_juki_mo6714s_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0009-0009-0009-000000000009"),
                            PurchasePrice = 14000000m,
                            SerialNumber = "MO6714S-D001",
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3902),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3902),
                            Description = "Máy vắt sổ 4 chỉ tốc độ cao cho vải nhẹ, đang sửa chữa.",
                            DeviceCode = "DEV022-JUKI-MO6714S-02",
                            DeviceName = "Juki MO-6714S Unit 2",
                            InstallationDate = new DateTime(2021, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0022-0022-0022-000000000022"),
                            ManufactureDate = new DateTime(2021, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "MO-6714S",
                            PhotoUrl = "https://example.com/photos/device_juki_mo6714s_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0026-0026-0026-000000000026"),
                            PurchasePrice = 14000000m,
                            SerialNumber = "MO6714S-D002",
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "InRepair",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3909),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3909),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động cho vải trung bình.",
                            DeviceCode = "DEV023-BROTHER-S7200C-01",
                            DeviceName = "Brother S-7200C Unit 1",
                            InstallationDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0023-0023-0023-000000000023"),
                            ManufactureDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "S-7200C",
                            PhotoUrl = "https://example.com/photos/device_brother_s7200c_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0005-0005-0005-000000000005"),
                            PurchasePrice = 22000000m,
                            SerialNumber = "S7200C-D001",
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3914),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3915),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động cho vải dày.",
                            DeviceCode = "DEV024-BROTHER-S7200C-02",
                            DeviceName = "Brother S-7200C Unit 2",
                            InstallationDate = new DateTime(2022, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0024-0024-0024-000000000024"),
                            ManufactureDate = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "S-7200C",
                            PhotoUrl = "https://example.com/photos/device_brother_s7200c_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0022-0022-0022-000000000022"),
                            PurchasePrice = 22000000m,
                            SerialNumber = "S7200C-D002",
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3920),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3920),
                            Description = "Máy may nặng cho vải denim và canvas.",
                            DeviceCode = "DEV025-SINGER-4423-01",
                            DeviceName = "Singer 4423 Unit 1",
                            InstallationDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0025-0025-0025-000000000025"),
                            ManufactureDate = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4423",
                            PhotoUrl = "https://example.com/photos/device_singer_4423_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0025-0025-0025-000000000025"),
                            PurchasePrice = 17000000m,
                            SerialNumber = "S4423-D001",
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm",
                            Status = "Active",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3931),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3931),
                            Description = "Máy may nặng cho vải da, đã ngừng sử dụng.",
                            DeviceCode = "DEV026-SINGER-4423-02",
                            DeviceName = "Singer 4423 Unit 2",
                            InstallationDate = new DateTime(2020, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0026-0026-0026-000000000026"),
                            ManufactureDate = new DateTime(2020, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4423",
                            PhotoUrl = "https://example.com/photos/device_singer_4423_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0030-0030-0030-000000000030"),
                            PurchasePrice = 17000000m,
                            SerialNumber = "S4423-D002",
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm",
                            Status = "Retired",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3938),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3938),
                            Description = "Máy may hai kim công nghiệp cho vải jeans.",
                            DeviceCode = "DEV027-JUKI-LH3568S-01",
                            DeviceName = "Juki LH-3568S Unit 1",
                            InstallationDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0027-0027-0027-000000000027"),
                            ManufactureDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "LH-3568S",
                            PhotoUrl = "https://example.com/photos/device_juki_lh3568s_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0016-0016-0016-000000000016"),
                            PurchasePrice = 25000000m,
                            SerialNumber = "LH3568S-D001",
                            Specifications = "Tốc độ tối đa: 3000 SPM, Độ dài mũi may: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3949),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3950),
                            Description = "Máy may hai kim công nghiệp cho vải dày, đang sửa chữa.",
                            DeviceCode = "DEV028-JUKI-LH3568S-02",
                            DeviceName = "Juki LH-3568S Unit 2",
                            InstallationDate = new DateTime(2022, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0028-0028-0028-000000000028"),
                            ManufactureDate = new DateTime(2021, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "LH-3568S",
                            PhotoUrl = "https://example.com/photos/device_juki_lh3568s_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0018-0018-0018-000000000018"),
                            PurchasePrice = 25000000m,
                            SerialNumber = "LH3568S-D002",
                            Specifications = "Tốc độ tối đa: 3000 SPM, Độ dài mũi may: 5mm",
                            Status = "InRepair",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3956),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3956),
                            Description = "Máy vắt sổ 3 chỉ cho vải mỏng và tổng hợp.",
                            DeviceCode = "DEV029-BROTHER-B735-01",
                            DeviceName = "Brother B735 Unit 1",
                            InstallationDate = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0029-0029-0029-000000000029"),
                            ManufactureDate = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B735",
                            PhotoUrl = "https://example.com/photos/device_brother_b735_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0017-0017-0017-000000000017"),
                            PurchasePrice = 13000000m,
                            SerialNumber = "B735-D001",
                            Specifications = "Tốc độ tối đa: 6500 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3964),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(3964),
                            Description = "Máy vắt sổ 3 chỉ cho vải cotton, đã ngừng sử dụng.",
                            DeviceCode = "DEV030-BROTHER-B735-02",
                            DeviceName = "Brother B735 Unit 2",
                            InstallationDate = new DateTime(2020, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0030-0030-0030-000000000030"),
                            ManufactureDate = new DateTime(2020, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B735",
                            PhotoUrl = "https://example.com/photos/device_brother_b735_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0027-0027-0027-000000000027"),
                            PurchasePrice = 13000000m,
                            SerialNumber = "B735-D002",
                            Specifications = "Tốc độ tối đa: 6500 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0",
                            Status = "Retired",
                            Supplier = "Brother Vietnam"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelatedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceHistories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33cc4a77-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9366),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9367),
                            ActionType = "Warranty",
                            ComponentCode = "TNS-001",
                            ComponentName = "Thread Tension Unit",
                            Cost = 0m,
                            Description = "Bảo hành máy do lỗi đứt chỉ liên tục",
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_01.pdf",
                            EventDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Lỗi kỹ thuật từ nhà sản xuất trong cơ chế căng chỉ",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9375),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9375),
                            ActionType = "Repair",
                            ComponentCode = "MTR-001",
                            ComponentName = "Motor",
                            Cost = 1500000m,
                            Description = "Sửa chữa máy do hỏng động cơ",
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DocumentUrl = "https://example.com/docs/repair_juki_ddl8700_03.pdf",
                            EventDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Động cơ bị cháy do quá tải trong sản xuất",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9379),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9380),
                            ActionType = "Replacement",
                            ComponentCode = "MTR-002",
                            ComponentName = "Motor",
                            Cost = 2000000m,
                            Description = "Thay thế động cơ cho máy Juki DDL-8700",
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            DocumentUrl = "https://example.com/docs/replacement_juki_ddl8700_04.pdf",
                            EventDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Động cơ cũ bị hỏng do sử dụng lâu dài",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9384),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9386),
                            ActionType = "Warranty",
                            ComponentCode = "NDL-001",
                            ComponentName = "Needle Bar",
                            Cost = 0m,
                            Description = "Bảo hành máy do kẹt kim",
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_07.pdf",
                            EventDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Lỗi cơ chế kim từ nhà sản xuất",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9390),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9391),
                            ActionType = "Repair",
                            ComponentCode = "BRG-001",
                            ComponentName = "Bearing",
                            Cost = 800000m,
                            Description = "Sửa chữa tiếng ồn bất thường từ máy",
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            DocumentUrl = "https://example.com/docs/repair_juki_ddl8700_08.pdf",
                            EventDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Ổ bi bị mòn do thiếu bôi trơn",
                            Status = "Failed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9395),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9395),
                            ActionType = "Warranty",
                            ComponentCode = "CTR-001",
                            ComponentName = "Control Unit",
                            Cost = 0m,
                            Description = "Bảo hành máy do lỗi hiệu chỉnh cắt chỉ tự động",
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_01.pdf",
                            EventDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Hệ thống điều khiển số bị lỗi từ nhà sản xuất",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9402),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9403),
                            ActionType = "Repair",
                            ComponentCode = "CTR-002",
                            ComponentName = "Thread Trimmer",
                            Cost = 1200000m,
                            Description = "Sửa chữa máy do lỗi hệ thống cắt chỉ",
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            DocumentUrl = "https://example.com/docs/repair_juki_ddl9000c_03.pdf",
                            EventDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Bộ phận cắt chỉ bị kẹt do hao mòn",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9407),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9408),
                            ActionType = "Replacement",
                            ComponentCode = "DFD-001",
                            ComponentName = "Differential Feed Dog",
                            Cost = 1000000m,
                            Description = "Thay thế bộ phận cấp liệu khác biệt",
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            DocumentUrl = "https://example.com/docs/replacement_brother_b957_01.pdf",
                            EventDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Brother Vietnam",
                            Reason = "Bộ phận cấp liệu bị hỏng do sử dụng sai",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9412),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9412),
                            ActionType = "Warranty",
                            ComponentCode = "PWR-001",
                            ComponentName = "Power Board",
                            Cost = 0m,
                            Description = "Bảo hành máy do sự cố nguồn điện",
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            DocumentUrl = "https://example.com/docs/warranty_singer_4452_01.pdf",
                            EventDate = new DateTime(2022, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Singer Vietnam",
                            Reason = "Bo mạch nguồn bị lỗi từ nhà sản xuất",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9417),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9417),
                            ActionType = "Repair",
                            ComponentCode = "PFT-001",
                            ComponentName = "Presser Foot Mechanism",
                            Cost = 900000m,
                            Description = "Sửa chữa máy do hỏng cơ chế chân vịt",
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            DocumentUrl = "https://example.com/docs/repair_singer_4452_03.pdf",
                            EventDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Singer Vietnam",
                            Reason = "Cơ chế chân vịt bị mòn do sử dụng lâu dài",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarranties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e2f3a4-0001-4001-8001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9544),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9545),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_01.pdf",
                            Notes = "Bảo hành định kỳ cho máy mới, bao gồm kiểm tra cơ chế căng chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-001",
                            WarrantyEndDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0009-4009-8009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9551),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9552),
                            Cost = 500000m,
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_01_ext.pdf",
                            Notes = "Gia hạn bảo hành sau khi hết bảo hành nhà sản xuất",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-009",
                            WarrantyEndDate = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "AfterWarranty",
                            WarrantyStartDate = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Extended"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0010-4010-8010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9557),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9557),
                            Cost = 800000m,
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_01_repair.pdf",
                            Notes = "Bảo hành sau sửa chữa bộ phận cấp liệu",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP008",
                            SparePartName = "Bộ Cấp Liệu",
                            Status = "InProgress",
                            WarrantyCode = "WAR-JUKI-010",
                            WarrantyEndDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "AfterRepair",
                            WarrantyStartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "ThirdParty"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0011-4011-8011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9562),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9562),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0002-0002-0002-000000000002"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_02.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra hệ thống kim và chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-011",
                            WarrantyEndDate = new DateTime(2022, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0002-4002-8002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9569),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9569),
                            Cost = 500000m,
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_03.pdf",
                            Notes = "Gia hạn bảo hành sau sửa chữa động cơ bị cháy",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP007",
                            SparePartName = "Mô Tơ Máy May",
                            Status = "Pending",
                            WarrantyCode = "WAR-JUKI-002",
                            WarrantyEndDate = new DateTime(2026, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "AfterRepair",
                            WarrantyStartDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Extended"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0012-4012-8012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9575),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9575),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_03_new.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra động cơ và bộ căng chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-012",
                            WarrantyEndDate = new DateTime(2022, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0003-4003-8003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9579),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9580),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_04.pdf",
                            Notes = "Bảo hành sau khi thay thế động cơ do hỏng hóc",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP007",
                            SparePartName = "Mô Tơ Máy May",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-003",
                            WarrantyEndDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "AfterReplacement",
                            WarrantyStartDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0013-4013-8013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9584),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9584),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0005-0005-0005-000000000005"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_05.pdf",
                            Notes = "Bảo hành máy mới, hiệu chỉnh hệ thống cấp liệu",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-013",
                            WarrantyEndDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0014-4014-8014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9589),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9590),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0006-0006-0006-000000000006"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_06.pdf",
                            Notes = "Bảo hành máy mới, đã hết hạn trước khi máy ngừng sử dụng",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-014",
                            WarrantyEndDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0004-4004-8004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9594),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9595),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_07.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra và sửa lỗi kẹt kim",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP009",
                            SparePartName = "Trụ Gắn Kim",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-004",
                            WarrantyEndDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0015-4015-8015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9599),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9600),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_08.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra hệ thống căng chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-015",
                            WarrantyEndDate = new DateTime(2022, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0016-4016-8016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9605),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9606),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_09.pdf",
                            Notes = "Bảo hành máy mới, hiệu chỉnh động cơ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-016",
                            WarrantyEndDate = new DateTime(2022, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0017-4017-8017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9612),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9612),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0010-0010-0010-000000000010"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_10.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra hệ thống cấp liệu",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-017",
                            WarrantyEndDate = new DateTime(2022, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2020, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0005-4005-8005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9617),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9617),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_01.pdf",
                            Notes = "Bảo hành máy mới, hiệu chỉnh hệ thống cắt chỉ tự động",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP029",
                            SparePartName = "Bộ Điều Khiển Điện Tử",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-005",
                            WarrantyEndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0018-4018-8018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9622),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9622),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_02.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra hệ thống cắt chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-018",
                            WarrantyEndDate = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0006-4006-8006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9626),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9626),
                            Cost = 500000m,
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_03.pdf",
                            Notes = "Gia hạn bảo hành sau sửa chữa bộ phận cắt chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Pending",
                            WarrantyCode = "WAR-JUKI-006",
                            WarrantyEndDate = new DateTime(2026, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "AfterRepair",
                            WarrantyStartDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Extended"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0019-4019-8019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9667),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9667),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_03_new.pdf",
                            Notes = "Bảo hành máy mới, hiệu chỉnh bộ cắt chỉ tự động",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-019",
                            WarrantyEndDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0007-4007-8007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9672),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9672),
                            Cost = 1000000m,
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            DocumentUrl = "https://example.com/docs/warranty_brother_b957_01.pdf",
                            Notes = "Bảo hành bên thứ ba sau thay thế bộ phận cấp liệu khác biệt",
                            Provider = "Brother Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-BROTHER-001",
                            WarrantyEndDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "AfterReplacement",
                            WarrantyStartDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "ThirdParty"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0008-4008-8008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9676),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(9676),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            DocumentUrl = "https://example.com/docs/warranty_singer_4452_01.pdf",
                            Notes = "Bảo hành máy mới, sửa chữa bo mạch nguồn bị lỗi",
                            Provider = "Singer Vietnam",
                            SparePartCode = "SP029",
                            SparePartName = "Bộ Điều Khiển Điện Tử",
                            Status = "Completed",
                            WarrantyCode = "WAR-SINGER-001",
                            WarrantyEndDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyReason = "NewDevice",
                            WarrantyStartDate = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyType = "Manufacturer"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("DeviceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarrantyHistories", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageMappingsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("EstimatedRepairTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ErrorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Errors_ErrorCode")
                        .HasFilter("[ErrorCode] IS NOT NULL");

                    b.ToTable("Errors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4349),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4349),
                            Description = "Bàn đạp không phản hồi hoặc mất tín hiệu.",
                            ErrorCode = "HONG_BAN_DAP",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Hỏng Bàn Đạp",
                            OccurrenceCount = 20,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4353),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4354),
                            Description = "Dây curoa lỏng hoặc mòn, gây mất chuyển động.",
                            ErrorCode = "DAYCUROA_TRUOT",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Dây Curoa Trượt",
                            OccurrenceCount = 15,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a333-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4356),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4357),
                            Description = "Bo điều khiển bị lỗi, không kiểm soát được tốc độ.",
                            ErrorCode = "MAY_CHAY_LUON_LUOT",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Máy Chạy Luôn Lượt",
                            OccurrenceCount = 5,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4362),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4363),
                            Description = "Động cơ chính bị cháy do quá tải hoặc ngắn mạch.",
                            ErrorCode = "CHAY_MOTOR",
                            EstimatedRepairTime = new TimeSpan(0, 3, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cháy Motor",
                            OccurrenceCount = 3,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4366),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4367),
                            Description = "Cơ chế giữ kim bị lệch hoặc gãy.",
                            ErrorCode = "KHOA_KIM_HONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 40, 0, 0),
                            IsCommon = true,
                            Name = "Khóa Kim Hỏng",
                            OccurrenceCount = 18,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a666-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4369),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4370),
                            Description = "Dầu rò ra ngoài do gioăng hoặc phớt bị mòn.",
                            ErrorCode = "GIOANG_DAU_BI_RO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Gioăng Dầu Bị Rò",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a777-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4372),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4373),
                            Description = "Cảm biến vị trí bị lệch dẫn đến dừng máy không đúng lúc.",
                            ErrorCode = "CAM_BIEN_LECH",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Lệch",
                            OccurrenceCount = 6,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4376),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4376),
                            Description = "Bo mạch điều khiển bị chập, không phản hồi.",
                            ErrorCode = "LOI_MACH_DIEU_KHIEN",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Lỗi Mạch Điều Khiển",
                            OccurrenceCount = 4,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a999-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4379),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4379),
                            Description = "Cơ chế chống trôi vải không ăn khớp.",
                            ErrorCode = "CHONG_TROI_KHONG_HOAT_DONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 50, 0, 0),
                            IsCommon = true,
                            Name = "Chống Trôi Không Hoạt Động",
                            OccurrenceCount = 12,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1abbb-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4382),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4382),
                            Description = "Chốt vải bị kẹt, gây gián đoạn chu trình may.",
                            ErrorCode = "CHOT_VAI_KET",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Chốt Vải Kẹt",
                            OccurrenceCount = 22,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1addd-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4386),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4386),
                            Description = "Vòng bạc trục bị mòn dẫn đến rung lắc hoặc tiếng ồn lớn.",
                            ErrorCode = "VONG_BAC_MON",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Vòng Bạc Mòn",
                            OccurrenceCount = 14,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1aeee-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4391),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4391),
                            Description = "Dao cắt không bén, gây xơ vải hoặc rách mép.",
                            ErrorCode = "DAO_CAT_KHONG_SAC",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Dao Cắt Không Sắc",
                            OccurrenceCount = 25,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4394),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4394),
                            Description = "Cảm biến không phát hiện được vải khi đưa vào.",
                            ErrorCode = "CAM_BIEN_VAI_KHONG_NHAN",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Vải Không Nhận",
                            OccurrenceCount = 6,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4398),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4398),
                            Description = "Kim không đúng trục tâm, đâm lệch lỗ.",
                            ErrorCode = "KIM_LOI_TAM",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Kim Lỗi Tâm",
                            OccurrenceCount = 18,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a123-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4400),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4401),
                            Description = "Quạt tản nhiệt không hoạt động gây quá nhiệt.",
                            ErrorCode = "LOI_QUAT_GIO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Lỗi Quạt Gió",
                            OccurrenceCount = 7,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4404),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4404),
                            Description = "Trục chính không quay đồng tâm gây rung.",
                            ErrorCode = "TRUC_CHINH_LAC",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Trục Chính Lệch",
                            OccurrenceCount = 4,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a125-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4406),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4407),
                            Description = "Đèn máy không sáng do đuôi đèn bị hỏng.",
                            ErrorCode = "DUI_DEN_CHAY",
                            EstimatedRepairTime = new TimeSpan(0, 0, 20, 0, 0),
                            IsCommon = true,
                            Name = "Đuôi Đèn Cháy",
                            OccurrenceCount = 15,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4409),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4410),
                            Description = "Bộ điều khiển không lưu lại các thiết lập máy.",
                            ErrorCode = "MAT_BO_NHO_LUU_THONG_SO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Mất Bộ Nhớ Lưu Thông Số",
                            OccurrenceCount = 2,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4412),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4412),
                            Description = "Áp lực chân vịt không ổn định do cảm biến sai số.",
                            ErrorCode = "CAM_BIEN_AP_LUC_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Áp Lực Lỗi",
                            OccurrenceCount = 5,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4416),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4417),
                            Description = "Vải bị kéo không đều do lỗi bộ cấp vải.",
                            ErrorCode = "ROONG_KHONG_DU_SIEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Rong Không Đủ Siêu",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4419),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4419),
                            Description = "Bộ phận giữ chỉ không đủ lực siết, gây bung chỉ khi may.",
                            ErrorCode = "MO_TROI_CHI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 45, 0, 0),
                            IsCommon = true,
                            Name = "Mỏ Trói Chỉ Bị Lỏng",
                            OccurrenceCount = 13,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4422),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4422),
                            Description = "Bánh răng truyền động bị mòn, phát ra tiếng kêu hoặc trượt.",
                            ErrorCode = "BANH_RANG_MON",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Bánh Răng Mòn",
                            OccurrenceCount = 17,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4425),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4425),
                            Description = "Bộ phận điều khiển bằng tay không ăn khớp với cơ cấu truyền động.",
                            ErrorCode = "CAM_TAY_KHONG_AN_KHOP",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cần Tay Không Ăn Khớp",
                            OccurrenceCount = 3,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4431),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4431),
                            Description = "Kim va vào mặt vải hoặc phụ liệu, có thể gây hỏng bề mặt.",
                            ErrorCode = "KIM_CHAM_VAI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Kim Chạm Vải",
                            OccurrenceCount = 22,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4434),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4434),
                            Description = "Dây nối từ nút khởi động đến động cơ bị hở hoặc đứt.",
                            ErrorCode = "DAY_KHOI_DONG_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Dây Khởi Động Lỗi",
                            OccurrenceCount = 6,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4437),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4437),
                            Description = "Một số bu lông cố định các cụm máy bị lỏng gây rung lắc.",
                            ErrorCode = "BULONG_LONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 40, 0, 0),
                            IsCommon = true,
                            Name = "Bu Lông Lỏng",
                            OccurrenceCount = 19,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4440),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4440),
                            Description = "Hỏng mạch điện đèn chiếu sáng, gây mất tầm nhìn khu vực may.",
                            ErrorCode = "MACH_DEN_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Mạch Đèn Lỗi",
                            OccurrenceCount = 12,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a136-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4444),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4444),
                            Description = "Dầu bôi trơn ra quá nhiều gây loang vải hoặc trơn trượt bộ truyền.",
                            ErrorCode = "DAU_BO_NHIEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Dầu Bôi Trơn Nhiều",
                            OccurrenceCount = 11,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4447),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4447),
                            Description = "Quạt thông gió hoạt động yếu, không đủ làm mát cho mô tơ.",
                            ErrorCode = "QUAT_THONG_GIO_YEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Quạt Thông Gió Yếu",
                            OccurrenceCount = 4,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a138-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4449),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4450),
                            Description = "Cửa kim không thẳng hàng với trục kim gây lệch đường may.",
                            ErrorCode = "CUA_KIM_LECH",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Cửa Kim Lệch",
                            OccurrenceCount = 20,
                            Severity = "Medium"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestIssueId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("IssueKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("int");

                    b.HasIndex("IssueKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Issues_IssueKey")
                        .HasFilter("[IssueKey] IS NOT NULL");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2934),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2935),
                            Description = "Máy may bị nóng sau thời gian sử dụng ngắn.",
                            DisplayName = "Máy Nóng",
                            IsCommon = false,
                            IssueKey = "MAY_NONG"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2942),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2943),
                            Description = "Kim bị gãy trong quá trình may.",
                            DisplayName = "Kim Gãy",
                            IsCommon = false,
                            IssueKey = "KIM_GAY"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2946),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2946),
                            Description = "Máy không khởi động hoặc không hoạt động khi bật công tắc.",
                            DisplayName = "Máy Không Chạy",
                            IsCommon = false,
                            IssueKey = "MAY_KHONG_CHAY"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2949),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2950),
                            Description = "Máy bị chảy dầu ra ngoài, ảnh hưởng đến hoạt động.",
                            DisplayName = "Chảy Dầu",
                            IsCommon = false,
                            IssueKey = "CHAY_DAU"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2952),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2953),
                            Description = "Máy phát ra tiếng ồn lớn bất thường khi hoạt động.",
                            DisplayName = "Kêu To",
                            IsCommon = false,
                            IssueKey = "KEU_TO"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2955),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2955),
                            Description = "Máy làm rách vải trong quá trình may.",
                            DisplayName = "Rách Vải",
                            IsCommon = false,
                            IssueKey = "RACH_VAI"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2959),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2960),
                            Description = "Kim không xuyên đúng vị trí gây lỗi đường may.",
                            DisplayName = "Lưỡi Kim",
                            IsCommon = false,
                            IssueKey = "LUOI_KIM"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2962),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2962),
                            Description = "Chỉ bị đứt liên tục trong quá trình sử dụng.",
                            DisplayName = "Đứt Chỉ",
                            IsCommon = false,
                            IssueKey = "DUT_CHI"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2964),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2965),
                            Description = "Máy không cuốn chỉ hoặc chỉ bị rối.",
                            DisplayName = "Không Cuốn Chỉ",
                            IsCommon = false,
                            IssueKey = "KHONG_CUON_CHI"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2967),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2967),
                            Description = "Máy chạy chậm hoặc không đều tốc độ.",
                            DisplayName = "Máy Chạy Chậm",
                            IsCommon = false,
                            IssueKey = "MAY_CHAY_CHAM"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2969),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2969),
                            Description = "Đường chỉ may không đều, lúc chặt lúc lỏng.",
                            DisplayName = "Chỉ Không Đều",
                            IsCommon = false,
                            IssueKey = "CHI_KHONG_DEU"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2971),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2971),
                            Description = "Đèn báo lỗi trên máy may sáng liên tục.",
                            DisplayName = "Đèn Báo Lỗi",
                            IsCommon = false,
                            IssueKey = "DEN_BAO_LOI"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2973),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2974),
                            Description = "Bàn đạp không phản hồi khi sử dụng.",
                            DisplayName = "Bàn Đạp Không Hoạt Động",
                            IsCommon = false,
                            IssueKey = "BAN_DAP_KHONG_HOAT_DONG"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2976),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2976),
                            Description = "Vải bị nhăn hoặc co kéo trong quá trình may.",
                            DisplayName = "Vải Bị Nhăn",
                            IsCommon = false,
                            IssueKey = "VAI_BI_NHAN"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2979),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2980),
                            Description = "Kim may không di chuyển khi máy hoạt động.",
                            DisplayName = "Kim Không Di Chuyển",
                            IsCommon = false,
                            IssueKey = "KIM_KHONG_DI_CHUYEN"
                        },
                        new
                        {
                            Id = new Guid("12121212-1212-1212-1212-121212121212"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2982),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2982),
                            Description = "Ống chỉ bị kẹt hoặc không quay đúng cách.",
                            DisplayName = "Ống Chỉ Lỗi",
                            IsCommon = false,
                            IssueKey = "ONG_CHI_LOI"
                        },
                        new
                        {
                            Id = new Guid("23232323-2323-2323-2323-232323232323"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2985),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2986),
                            Description = "Dây curoa bị lỏng hoặc đứt, gây ngừng máy.",
                            DisplayName = "Dây Curoa Lỗi",
                            IsCommon = false,
                            IssueKey = "DAY_CUROA_LOI"
                        },
                        new
                        {
                            Id = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2988),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2989),
                            Description = "Chỉ dưới không được kéo lên đúng cách.",
                            DisplayName = "Chỉ Dưới Lỗi",
                            IsCommon = false,
                            IssueKey = "CHI_DUOI_LOI"
                        },
                        new
                        {
                            Id = new Guid("45454545-4545-4545-4545-454545454545"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2991),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2991),
                            Description = "Máy tự động dừng trong khi đang hoạt động.",
                            DisplayName = "Máy Tự Dừng",
                            IsCommon = false,
                            IssueKey = "MAY_TU_DUNG"
                        },
                        new
                        {
                            Id = new Guid("56565656-5656-5656-5656-565656565656"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2994),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2995),
                            Description = "Nút điều chỉnh độ căng chỉ không hoạt động.",
                            DisplayName = "Nút Điều Chỉnh Lỗi",
                            IsCommon = false,
                            IssueKey = "NUT_DIEU_CHINH_LOI"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MachineCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Machines_MachineCode")
                        .HasFilter("[MachineCode] IS NOT NULL");

                    b.ToTable("Machines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2636),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2636),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 1, dùng cho vải nhẹ.",
                            MachineCode = "MC001-JUKI-DDL8700-01",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_01.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2641),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2641),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 2, dùng cho vải trung bình.",
                            MachineCode = "MC002-JUKI-DDL8700-02",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_02.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2648),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2648),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 3, đang bảo trì.",
                            MachineCode = "MC003-JUKI-DDL8700-03",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_03.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-003",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2653),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2654),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 4, dùng cho vải cotton.",
                            MachineCode = "MC004-JUKI-DDL8700-04",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_04.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-004",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2658),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2658),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 5, dùng cho vải tổng hợp.",
                            MachineCode = "MC005-JUKI-DDL8700-05",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_05.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-005",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2661),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2661),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 6, đã ngừng sử dụng.",
                            MachineCode = "MC006-JUKI-DDL8700-06",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_06.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-006",
                            Status = "Retired"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2665),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2665),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 7, dùng cho vải dày.",
                            MachineCode = "MC007-JUKI-DDL8700-07",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_07.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-007",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2668),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2669),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 8, dùng cho vải mỏng.",
                            MachineCode = "MC008-JUKI-DDL8700-08",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_08.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J87008",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2671),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2672),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 9, dùng cho vải hỗn hợp.",
                            MachineCode = "MC009-JUKI-DDL8700-09",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_09.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-009",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2675),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2676),
                            Description = "Máy may kim đơn tốc độ cao, đơn vị 10, dùng cho mục đích chung.",
                            MachineCode = "MC010-JUKI-DDL8700-10",
                            MachineName = "Máy May Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_10.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5500 SPM, Độ dài mũi may tối đa: 5mm, Serial: J8700-010",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2681),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2681),
                            Description = "Máy may kim đơn kỹ thuật số với chức năng cắt chỉ tự động, đơn vị 1.",
                            MachineCode = "MC011-JUKI-DDL9000C-01",
                            MachineName = "Máy May Kim Đơn Kỹ Thuật Số",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_01.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động, Serial: J9000C-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2684),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2684),
                            Description = "Máy may kim đơn kỹ thuật số với chức năng cắt chỉ tự động, đơn vị 2.",
                            MachineCode = "MC012-JUKI-DDL9000C-02",
                            MachineName = "Máy May Kim Đơn Kỹ Thuật Số",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_02.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động, Serial: J9000C-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2687),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2688),
                            Description = "Máy may kim đơn kỹ thuật số với chức năng cắtρού chỉ tự động, đơn vị 3, đang bảo trì.",
                            MachineCode = "MC013-JUKI-DDL9000C-03",
                            MachineName = "Máy May Kim Đơn Kỹ Thuật Số",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_03.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động, Serial: J9000C-003",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2691),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2691),
                            Description = "Máy may kim đơn kỹ thuật số với chức năng cắt chỉ tự động, đơn vị 4.",
                            MachineCode = "MC014-JUKI-DDL9000C-04",
                            MachineName = "Máy May Kim Đơn Kỹ Thuật Số",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_04.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động, Serial: J9000C-004",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2694),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2694),
                            Description = "Máy vắt sổ 3 chỉ, đơn vị 1, dùng cho vải nhẹ.",
                            MachineCode = "MC015-BROTHER-B957-01",
                            MachineName = "Máy Vắt Sổ",
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/brother_b957_01.jpg",
                            ReleaseDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: B957-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2698),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2698),
                            Description = "Máy vắt sổ 3 chỉ, đơn vị 2, dùng cho vải tổng hợp.",
                            MachineCode = "MC016-BROTHER-B957-02",
                            MachineName = "Máy Vắt Sổ",
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/brother_b957_02.jpg",
                            ReleaseDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: B957-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2701),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2701),
                            Description = "Máy vắt sổ 3 chỉ, đơn vị 3, dùng cho vải mỏng.",
                            MachineCode = "MC017-BROTHER-B957-03",
                            MachineName = "Máy Vắt Sổ",
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/brother_b957_03.jpg",
                            ReleaseDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: B957-003",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2705),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2705),
                            Description = "Máy may nặng cho vật liệu dày, đơn vị 1, dùng cho vải denim.",
                            MachineCode = "MC018-SINGER-4452-01",
                            MachineName = "Máy May Nặng",
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/singer_4452_01.jpg",
                            ReleaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm, Serial: S4452-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2710),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2710),
                            Description = "Máy may nặng cho vật liệu dày, đơn vị 2, dùng cho da.",
                            MachineCode = "MC019-SINGER-4452-02",
                            MachineName = "Máy May Nặng",
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/singer_4452_02.jpg",
                            ReleaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm, Serial: S4452-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2717),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2718),
                            Description = "Máy may nặng cho vật liệu dày, đơn vị 3, dùng cho vải canvas, đang bảo trì.",
                            MachineCode = "MC020-SINGER-4452-03",
                            MachineName = "Máy May Nặng",
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/singer_4452_03.jpg",
                            ReleaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm, Serial: S4452-003",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2720),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2720),
                            Description = "Máy vắt sổ 4 chỉ tốc độ cao, đơn vị 1, dùng cho vải cotton và vải tổng hợp.",
                            MachineCode = "MC021-JUKI-MO6714S-01",
                            MachineName = "Máy Vắt Sổ Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "MO-6714S",
                            PhotoUrl = "https://example.com/photos/juki_mo6714s_01.jpg",
                            ReleaseDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: MO6714S-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2723),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2723),
                            Description = "Máy vắt sổ 4 chỉ tốc độ cao, đơn vị 2, dùng cho vải nhẹ, đang bảo trì.",
                            MachineCode = "MC022-JUKI-MO6714S-02",
                            MachineName = "Máy Vắt Sổ Công Nghiệp",
                            Manufacturer = "Juki",
                            Model = "MO-6714S",
                            PhotoUrl = "https://example.com/photos/juki_mo6714s_02.jpg",
                            ReleaseDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 7000 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: MO6714S-002",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2726),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2727),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động, đơn vị 1, dùng cho vải trung bình.",
                            MachineCode = "MC023-BROTHER-S7200C-01",
                            MachineName = "Máy May Kim Đơn Kỹ Thuật Số",
                            Manufacturer = "Brother",
                            Model = "S-7200C",
                            PhotoUrl = "https://example.com/photos/brother_s7200c_01.jpg",
                            ReleaseDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động, Serial: S7200C-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2759),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Máy may kim đơn kỹ thuật số với cắt chỉ tự động, đơn vị 2, dùng cho vải dày.",
                            MachineCode = "MC024-BROTHER-S7200C-02",
                            MachineName = "Máy May Kim Đơn Kỹ Thuật Số",
                            Manufacturer = "Brother",
                            Model = "S-7200C",
                            PhotoUrl = "https://example.com/photos/brother_s7200c_02.jpg",
                            ReleaseDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 5000 SPM, Cắt chỉ tự động, Serial: S7200C-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2765),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2765),
                            Description = "Máy may nặng cho vật liệu dày, đơn vị 1, dùng cho vải denim và canvas.",
                            MachineCode = "MC025-SINGER-4423-01",
                            MachineName = "Máy May Nặng",
                            Manufacturer = "Singer",
                            Model = "4423",
                            PhotoUrl = "https://example.com/photos/singer_4423_01.jpg",
                            ReleaseDate = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm, Serial: S4423-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2769),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2769),
                            Description = "Máy may nặng cho vật liệu dày, đơn vị 2, dùng cho da, đã ngừng sử dụng.",
                            MachineCode = "MC026-SINGER-4423-02",
                            MachineName = "Máy May Nặng",
                            Manufacturer = "Singer",
                            Model = "4423",
                            PhotoUrl = "https://example.com/photos/singer_4423_02.jpg",
                            ReleaseDate = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 1100 SPM, Độ nâng chân vịt: 6mm, Serial: S4423-002",
                            Status = "Retired"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2773),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2773),
                            Description = "Máy may hai kim công nghiệp, đơn vị 1, dùng cho vải jeans.",
                            MachineCode = "MC027-JUKI-LH3568S-01",
                            MachineName = "Máy May Hai Kim",
                            Manufacturer = "Juki",
                            Model = "LH-3568S",
                            PhotoUrl = "https://example.com/photos/juki_lh3568s_01.jpg",
                            ReleaseDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 3000 SPM, Độ dài mũi may tối đa: 5mm, Serial: LH3568S-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2776),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2776),
                            Description = "Máy may hai kim công nghiệp, đơn vị 2, dùng cho vải dày, đang bảo trì.",
                            MachineCode = "MC028-JUKI-LH3568S-02",
                            MachineName = "Máy May Hai Kim",
                            Manufacturer = "Juki",
                            Model = "LH-3568S",
                            PhotoUrl = "https://example.com/photos/juki_lh3568s_02.jpg",
                            ReleaseDate = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 3000 SPM, Độ dài mũi may tối đa: 5mm, Serial: LH3568S-002",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2779),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2780),
                            Description = "Máy vắt sổ 3 chỉ, đơn vị 1, dùng cho vải mỏng và vải tổng hợp.",
                            MachineCode = "MC029-BROTHER-B735-01",
                            MachineName = "Máy Vắt Sổ",
                            Manufacturer = "Brother",
                            Model = "B735",
                            PhotoUrl = "https://example.com/photos/brother_b735_01.jpg",
                            ReleaseDate = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 6500 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: B735-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2783),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2783),
                            Description = "Máy vắt sổ 3 chỉ, đơn vị 2, dùng cho vải cotton, đã ngừng sử dụng.",
                            MachineCode = "MC030-BROTHER-B735-02",
                            MachineName = "Máy Vắt Sổ",
                            Manufacturer = "Brother",
                            Model = "B735",
                            PhotoUrl = "https://example.com/photos/brother_b735_02.jpg",
                            ReleaseDate = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Tốc độ tối đa: 6500 SPM, Tỷ lệ cấp liệu vi sai: 0.7-2.0, Serial: B735-002",
                            Status = "Retired"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasFilter("[DeviceId] IS NOT NULL");

                    b.HasIndex("ZoneId");

                    b.ToTable("Positions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1e2d3c4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4070),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4071),
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4074),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4074),
                            DeviceId = new Guid("d1e2f3a4-0002-0002-0002-000000000002"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4078),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4078),
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4081),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4081),
                            DeviceId = new Guid("d1e2f3a4-0005-0005-0005-000000000005"),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4084),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4085),
                            DeviceId = new Guid("d1e2f3a4-0023-0023-0023-000000000023"),
                            Index = 5,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4088),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4088),
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4092),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4093),
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4096),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4096),
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4100),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4101),
                            DeviceId = new Guid("d1e2f3a4-0021-0021-0021-000000000021"),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4104),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4104),
                            DeviceId = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4107),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4107),
                            DeviceId = new Guid("d1e2f3a4-0010-0010-0010-000000000010"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4110),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4110),
                            DeviceId = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4113),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4113),
                            DeviceId = new Guid("d1e2f3a4-0014-0014-0014-000000000014"),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4116),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4117),
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0011-0011-0011-000000000011")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4119),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4120),
                            DeviceId = new Guid("d1e2f3a4-0006-0006-0006-000000000006"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0011-0011-0011-000000000011")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4126),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4126),
                            DeviceId = new Guid("d1e2f3a4-0027-0027-0027-000000000027"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4131),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4131),
                            DeviceId = new Guid("d1e2f3a4-0029-0029-0029-000000000029"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4134),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4134),
                            DeviceId = new Guid("d1e2f3a4-0028-0028-0028-000000000028"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4179),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4179),
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4183),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4183),
                            DeviceId = new Guid("d1e2f3a4-0016-0016-0016-000000000016"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0021-0011-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4187),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4187),
                            DeviceId = new Guid("d1e2f3a4-0017-0017-0017-000000000017"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4190),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4191),
                            DeviceId = new Guid("d1e2f3a4-0024-0024-0024-000000000024"),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4193),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4194),
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0007-0007-0007-000000000007")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4197),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4197),
                            DeviceId = new Guid("d1e2f3a4-0019-0019-0019-000000000019"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0007-0007-0007-000000000007")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4201),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4201),
                            DeviceId = new Guid("d1e2f3a4-0025-0025-0025-000000000025"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0007-0007-0007-000000000007")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4205),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4205),
                            DeviceId = new Guid("d1e2f3a4-0022-0022-0022-000000000022"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0013-0013-0013-000000000013")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4208),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4208),
                            DeviceId = new Guid("d1e2f3a4-0030-0030-0030-000000000030"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0013-0013-0013-000000000013")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4211),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4212),
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0014-0014-0014-000000000014")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4214),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4215),
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0014-0014-0014-000000000014")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4219),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(4220),
                            DeviceId = new Guid("d1e2f3a4-0026-0026-0026-000000000026"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0015-0015-0015-000000000015")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Reports", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1f2a3b4-0001-0001-0001-300000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4822),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4822),
                            Location = "Khu Vực: Khu Sản Xuất Chính A, Khu: Dây Chuyền May A, Vị trí: 3",
                            Priority = 3,
                            RequestId = new Guid("a1f2e3d4-0002-0002-1002-000000000002"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0002-0002-0002-300000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4826),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 14, 3, 10, 118, DateTimeKind.Utc).AddTicks(4826),
                            Location = "Khu Vực: Khu Sản Xuất Chính A, Khu: Dây Chuyền May B, Vị trí: 1",
                            Priority = 2,
                            RequestId = new Guid("a1f2e3d4-0003-0003-1003-000000000003"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0003-0003-0003-300000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4832),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4833),
                            Location = "Khu Vực: Khu Sản Xuất Chính B, Khu: Khu May Nặng A, Vị trí: 1",
                            Priority = 3,
                            RequestId = new Guid("a1f2e3d4-0005-0005-1005-000000000005"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0004-0004-0004-300000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4837),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4838),
                            Location = "Khu Vực: Khu Sản Xuất Chính B, Khu: Khu May Nặng B, Vị trí: 1",
                            Priority = 3,
                            RequestId = new Guid("a1f2e3d4-0006-0006-1006-000000000006"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0005-0005-0005-300000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4841),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 15, 3, 10, 118, DateTimeKind.Utc).AddTicks(4842),
                            Location = "Khu Vực: Khu Sản Xuất Chính A, Khu: Dây Chuyền May C, Vị trí: 3",
                            Priority = 2,
                            RequestId = new Guid("a1f2e3d4-0008-0008-1008-000000000008"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0006-0006-0006-300000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4846),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4846),
                            Location = "Khu Vực: Khu Sản Xuất Chính A, Khu: Khu Cắt May, Vị trí: 1",
                            Priority = 2,
                            RequestId = new Guid("a1f2e3d4-0009-0009-1009-000000000009"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0007-0007-0007-300000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4850),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4851),
                            Location = "Khu Vực: Khu Sản Xuất Chính B, Khu: Khu May Nặng A, Vị trí: 2",
                            Priority = 1,
                            RequestId = new Guid("a1f2e3d4-0011-0011-1011-000000000011"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0008-0008-0008-300000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4857),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4857),
                            Location = "Khu Vực: Khu Thêu, Khu: Khu May Nặng D, Vị trí: 2",
                            Priority = 2,
                            RequestId = new Guid("a1f2e3d4-0013-0013-1013-000000000013"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e1f2a3b4-0009-0009-0009-300000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4860),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 15, 3, 10, 118, DateTimeKind.Utc).AddTicks(4860),
                            Location = "Khu Vực: Khu Sản Xuất Chính B, Khu: Khu May Nặng A, Vị trí: 3",
                            Priority = 1,
                            RequestId = new Guid("a1f2e3d4-0015-0015-1015-000000000015"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SerderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SerderId");

                    b.ToTable("Requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1e2f3a4-0001-0001-1001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2919),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2919),
                            Description = "Máy ngừng hoạt động do đứt chỉ tại Dây chuyền May A, Vị trí 1, làm gián đoạn sản xuất vải mỏng.",
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "SXA-A01-1-4A7B2",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0002-0002-1002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2930),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 15, 3, 10, 117, DateTimeKind.Utc).AddTicks(2930),
                            Description = "Động cơ ngừng hoạt động tại Dây chuyền May A, Vị trí 3. Quan trọng cho sản xuất vải cotton.",
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            DueDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            ReportId = new Guid("e1f2a3b4-0001-0001-0001-300000000001"),
                            RequestTitle = "SXA-A01-3-8C9D4",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0003-0003-1003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2941),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 14, 3, 10, 117, DateTimeKind.Utc).AddTicks(2942),
                            Description = "Kim bị kẹt tại Dây chuyền May B, Vị trí 1. Ảnh hưởng đến sản xuất vải dày.",
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            DueDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            ReportId = new Guid("e1f2a3b4-0002-0002-0002-300000000002"),
                            RequestTitle = "SXA-A02-1-2E5F6",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0004-0004-1004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2945),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2946),
                            Description = "Máy cắt chỉ tự động bị lệch tại Dây chuyền May B, Vị trí 3. Gây ra mũi may không đều.",
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            DueDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            RequestTitle = "SXA-A02-3-7G8H9",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0005-0005-1005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2954),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 15, 3, 10, 117, DateTimeKind.Utc).AddTicks(2955),
                            Description = "Bộ phận cấp liệu khác biệt bị trục trặc tại Khu vực Vắt Sổ, Vị trí 1. Ảnh hưởng đến hoàn thiện vải mỏng.",
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            DueDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            ReportId = new Guid("e1f2a3b4-0003-0003-0003-300000000003"),
                            RequestTitle = "SXB-B01-1-1J2K3",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0006-0006-1006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2959),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 14, 3, 10, 117, DateTimeKind.Utc).AddTicks(2960),
                            Description = "Nguồn điện bị gián đoạn tại Khu vực May Nặng, Vị trí 1. Ảnh hưởng đến sản xuất vải denim.",
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            ReportId = new Guid("e1f2a3b4-0004-0004-0004-300000000004"),
                            RequestTitle = "SXB-B02-1-4L5M6",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0007-0007-1007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2964),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2964),
                            Description = "Cần bảo trì định kỳ cho Juki DDL-8700 tại Dây chuyền May C, Vị trí 1 để ngăn ngừa sự cố.",
                            DeviceId = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            DueDate = new DateTime(2025, 5, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            RequestTitle = "SXA-A03-1-8N9P0",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0008-0008-1008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2968),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 16, 3, 10, 117, DateTimeKind.Utc).AddTicks(2968),
                            Description = "Căng chỉ không đúng tại Dây chuyền May C, Vị trí 3. Ảnh hưởng đến chất lượng mũi may.",
                            DeviceId = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            DueDate = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            ReportId = new Guid("e1f2a3b4-0005-0005-0005-300000000005"),
                            RequestTitle = "SXA-A03-3-2Q3R4",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0009-0009-1009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2973),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 14, 3, 10, 117, DateTimeKind.Utc).AddTicks(2973),
                            Description = "Máy đang sửa chữa cần thay động cơ. Hiện không được gán vị trí.",
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DueDate = new DateTime(2025, 5, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            ReportId = new Guid("e1f2a3b4-0006-0006-0006-300000000006"),
                            RequestTitle = "SXA-A04-1-5S6T7",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0010-0010-1010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2978),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2978),
                            Description = "Dây đai truyền động bị trượt tại Khu vực May Nặng, Vị trí 2. Ảnh hưởng đến sản xuất da.",
                            DeviceId = new Guid("d1e2f3a4-0019-0019-0019-000000000019"),
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "SXB-B02-2-8U9V0",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0011-0011-1011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2983),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 15, 3, 10, 117, DateTimeKind.Utc).AddTicks(2983),
                            Description = "Máy vắt sổ tại Khu vực Vắt Sổ, Vị trí 2 cần bôi trơn để ngăn mòn.",
                            DeviceId = new Guid("d1e2f3a4-0016-0016-0016-000000000016"),
                            DueDate = new DateTime(2025, 5, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            ReportId = new Guid("e1f2a3b4-0007-0007-0007-300000000007"),
                            RequestTitle = "SXB-B01-2-1W2X3",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0012-0012-1012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2986),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2987),
                            Description = "Hệ thống điều khiển số cần cập nhật phần mềm tại Dây chuyền May C, Vị trí 4 để tối ưu hiệu suất.",
                            DeviceId = new Guid("d1e2f3a4-0014-0014-0014-000000000014"),
                            DueDate = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            RequestTitle = "SXA-A03-4-4Y5Z6",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0013-0013-1013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2993),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 15, 3, 10, 117, DateTimeKind.Utc).AddTicks(2993),
                            Description = "Máy đang sửa chữa cần thay cơ chế chân vịt. Hiện không được gán vị trí.",
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            DueDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            ReportId = new Guid("e1f2a3b4-0008-0008-0008-300000000008"),
                            RequestTitle = "KTV-TV1-2-7A8B9",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0014-0014-1014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(2997),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 16, 3, 10, 117, DateTimeKind.Utc).AddTicks(2997),
                            Description = "Tiếng ồn lạ từ máy tại Dây chuyền May B, Vị trí 2. Có thể do vấn đề ổ bi.",
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            Priority = "Medium",
                            RequestTitle = "SXA-A02-2-0C1D2",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Denied"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0015-0015-1015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3001),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 16, 3, 10, 117, DateTimeKind.Utc).AddTicks(3001),
                            Description = "Máy vắt sổ tại Khu vực Vắt Sổ, Vị trí 3 cần vệ sinh để loại bỏ bụi vải tích tụ.",
                            DeviceId = new Guid("d1e2f3a4-0017-0017-0017-000000000017"),
                            DueDate = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            ReportId = new Guid("e1f2a3b4-0009-0009-0009-300000000009"),
                            RequestTitle = "SXB-B01-3-3E4F5",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("SparepartCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SparepartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("SparepartCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Spareparts_SparepartCode")
                        .HasFilter("[SparepartCode] IS NOT NULL");

                    b.ToTable("Spareparts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4981),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4981),
                            Description = "Kim thép không gỉ dùng cho máy may công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP001",
                            SparepartName = "Kim May Công Nghiệp",
                            Specification = "Loại DBX1, cỡ 90/14",
                            StockQuantity = 150,
                            Unit = "Cái",
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4985),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4985),
                            Description = "Dây truyền động cho máy may",
                            IsAvailable = false,
                            SparepartCode = "SP002",
                            SparepartName = "Dây Curoa",
                            Specification = "Chiều dài 1m, bản 10mm",
                            StockQuantity = 60,
                            Unit = "Cái",
                            UnitPrice = 12000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4988),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4988),
                            Description = "Bàn đạp điều khiển tốc độ",
                            IsAvailable = false,
                            SparepartCode = "SP003",
                            SparepartName = "Bàn Đạp Máy",
                            Specification = "Điện áp 220V",
                            StockQuantity = 20,
                            Unit = "Cái",
                            UnitPrice = 45000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4992),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4992),
                            Description = "Ống chỉ nhựa cho máy may tự động",
                            IsAvailable = false,
                            SparepartCode = "SP004",
                            SparepartName = "Ống Chỉ",
                            Specification = "Đường kính 2.5cm",
                            StockQuantity = 500,
                            Unit = "Cái",
                            UnitPrice = 1500m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4996),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(4996),
                            Description = "Điều chỉnh nhiệt độ máy may",
                            IsAvailable = false,
                            SparepartCode = "SP005",
                            SparepartName = "Bộ Điều Khiển Nhiệt",
                            Specification = "Tối đa 200°C",
                            StockQuantity = 10,
                            Unit = "Bộ",
                            UnitPrice = 120000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5002),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5002),
                            Description = "Công tắc bật/tắt máy may",
                            IsAvailable = false,
                            SparepartCode = "SP006",
                            SparepartName = "Công Tắc Máy May",
                            Specification = "Công suất 250V - 10A",
                            StockQuantity = 35,
                            Unit = "Cái",
                            UnitPrice = 8000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5006),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5006),
                            Description = "Mô tơ điện cho máy may công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP007",
                            SparepartName = "Mô Tơ Máy May",
                            Specification = "Công suất 370W, điện 220V",
                            StockQuantity = 8,
                            Unit = "Cái",
                            UnitPrice = 350000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5009),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5010),
                            Description = "Đèn chiếu sáng cho khu vực may",
                            IsAvailable = false,
                            SparepartCode = "SP008",
                            SparepartName = "Đèn LED Gắn Máy",
                            Specification = "LED 12V, 5W, dán keo",
                            StockQuantity = 120,
                            Unit = "Cái",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5012),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5012),
                            Description = "Trụ gắn kim thay thế cho đầu máy",
                            IsAvailable = false,
                            SparepartCode = "SP009",
                            SparepartName = "Trụ Gắn Kim",
                            Specification = "Thép hợp kim bền cao",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 22000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5058),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5058),
                            Description = "Cơ cấu truyền động kim máy may",
                            IsAvailable = false,
                            SparepartCode = "SP010",
                            SparepartName = "Bộ Truyền Kim",
                            Specification = "Cơ khí chính xác cao",
                            StockQuantity = 12,
                            Unit = "Bộ",
                            UnitPrice = 85000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5061),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5061),
                            Description = "Bộ phận giữ chỉ dưới trong máy may",
                            IsAvailable = false,
                            SparepartCode = "SP011",
                            SparepartName = "Ổ Chỉ Dưới",
                            Specification = "Kim loại bền, chuẩn công nghiệp",
                            StockQuantity = 100,
                            Unit = "Cái",
                            UnitPrice = 10000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5064),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5064),
                            Description = "Bánh răng dẫn động kim và trụ máy",
                            IsAvailable = false,
                            SparepartCode = "SP012",
                            SparepartName = "Bánh Răng Truyền Động",
                            Specification = "Hợp kim, răng xoắn",
                            StockQuantity = 60,
                            Unit = "Cái",
                            UnitPrice = 30000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5068),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5068),
                            Description = "Trục truyền động từ mô tơ đến kim",
                            IsAvailable = false,
                            SparepartCode = "SP013",
                            SparepartName = "Trục Kim Máy May",
                            Specification = "Thép tôi cứng, chống mài mòn",
                            StockQuantity = 25,
                            Unit = "Cái",
                            UnitPrice = 40000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5073),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5073),
                            Description = "Khung giữ ống chỉ phía trên máy",
                            IsAvailable = false,
                            SparepartCode = "SP014",
                            SparepartName = "Giá Đỡ Ống Chỉ",
                            Specification = "Nhựa chịu lực hoặc kim loại",
                            StockQuantity = 80,
                            Unit = "Cái",
                            UnitPrice = 7000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5076),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5076),
                            Description = "Phụ kiện cảm biến tốc độ quay mô tơ",
                            IsAvailable = false,
                            SparepartCode = "SP015",
                            SparepartName = "Cảm Biến Tốc Độ",
                            Specification = "Điện áp 5V TTL, chuẩn hall sensor",
                            StockQuantity = 15,
                            Unit = "Cái",
                            UnitPrice = 65000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5079),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5079),
                            Description = "Bộ khung bên ngoài cho máy loại nhỏ",
                            IsAvailable = false,
                            SparepartCode = "SP016",
                            SparepartName = "Khung Máy Nhỏ",
                            Specification = "Nhôm đúc",
                            StockQuantity = 12,
                            Unit = "Bộ",
                            UnitPrice = 90000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5081),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5082),
                            Description = "Lót chân máy may giảm rung, chống ồn",
                            IsAvailable = false,
                            SparepartCode = "SP017",
                            SparepartName = "Đế Cao Su Chống Rung",
                            Specification = "Cao su tổng hợp, đường kính 5cm",
                            StockQuantity = 150,
                            Unit = "Cái",
                            UnitPrice = 3000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5084),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5085),
                            Description = "Bánh dẫn puli gắn với động cơ",
                            IsAvailable = false,
                            SparepartCode = "SP018",
                            SparepartName = "Puli Dây Curoa",
                            Specification = "Đường kính 80mm, thép hợp kim",
                            StockQuantity = 30,
                            Unit = "Cái",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5088),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5088),
                            Description = "Dây cấp nguồn cho mô tơ máy may",
                            IsAvailable = false,
                            SparepartCode = "SP019",
                            SparepartName = "Dây Điện Động Cơ",
                            Specification = "2 lõi, dài 1.5m, bọc cách điện",
                            StockQuantity = 100,
                            Unit = "Cuộn",
                            UnitPrice = 10000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5091),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5091),
                            Description = "Chắn dầu chống tràn ra khỏi ổ",
                            IsAvailable = false,
                            SparepartCode = "SP020",
                            SparepartName = "Bộ Gương Chắn Dầu",
                            Specification = "Nhựa chịu nhiệt, lắp trong trục máy",
                            StockQuantity = 50,
                            Unit = "Bộ",
                            UnitPrice = 22000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5094),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5094),
                            Description = "Kim chuyên dụng cho vải dày, da, nỉ",
                            IsAvailable = false,
                            SparepartCode = "SP021",
                            SparepartName = "Kim May Dày",
                            Specification = "Cỡ 100/16, loại DPX17",
                            StockQuantity = 80,
                            Unit = "Cái",
                            UnitPrice = 6000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5102),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5102),
                            Description = "Loại dây curoa dự phòng cho máy lập trình",
                            IsAvailable = false,
                            SparepartCode = "SP022",
                            SparepartName = "Dây Curoa Dự Phòng",
                            Specification = "Bản rộng 8mm, răng hình thang",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 15000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5104),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5105),
                            Description = "Loại đèn LED gắn bên cạnh trục kim",
                            IsAvailable = false,
                            SparepartCode = "SP023",
                            SparepartName = "Đèn Chiếu Sáng Máy May",
                            Specification = "LED trắng 6W, 220V",
                            StockQuantity = 100,
                            Unit = "Cái",
                            UnitPrice = 20000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5107),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5108),
                            Description = "Cơ cấu điều khiển chân vịt tự động",
                            IsAvailable = false,
                            SparepartCode = "SP024",
                            SparepartName = "Bộ Điều Khiển Chân Vịt",
                            Specification = "Tích hợp cảm biến áp suất",
                            StockQuantity = 18,
                            Unit = "Bộ",
                            UnitPrice = 95000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5110),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5110),
                            Description = "Ổ chỉ dưới thay thế cho máy Brother",
                            IsAvailable = false,
                            SparepartCode = "SP025",
                            SparepartName = "Ổ Chỉ Dưới (Loại A)",
                            Specification = "Chuẩn A, có lò xo giữ",
                            StockQuantity = 75,
                            Unit = "Cái",
                            UnitPrice = 11000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5113),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5113),
                            Description = "Thanh truyền động từ bàn đạp đến mô tơ",
                            IsAvailable = false,
                            SparepartCode = "SP026",
                            SparepartName = "Trục Quay Bàn Đạp",
                            Specification = "Thép đặc, dài 30cm",
                            StockQuantity = 25,
                            Unit = "Cái",
                            UnitPrice = 27000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5115),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5116),
                            Description = "Đế cao su chống trượt cho máy may",
                            IsAvailable = false,
                            SparepartCode = "SP027",
                            SparepartName = "Đế Máy May",
                            Specification = "4 miếng/bộ, cao su EPDM",
                            StockQuantity = 90,
                            Unit = "Bộ",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5119),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5119),
                            Description = "Giá đỡ đèn LED trên thân máy",
                            IsAvailable = false,
                            SparepartCode = "SP028",
                            SparepartName = "Khung Gắn Đèn",
                            Specification = "Inox không gỉ",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 9000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5122),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5123),
                            Description = "Bo mạch điều khiển trung tâm cho máy điện tử",
                            IsAvailable = false,
                            SparepartCode = "SP029",
                            SparepartName = "Bộ Điều Khiển Điện Tử",
                            Specification = "Mainboard 8-bit MCU",
                            StockQuantity = 5,
                            Unit = "Bộ",
                            UnitPrice = 350000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5128),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(5128),
                            Description = "Khung gắn chỉ đứng dùng cho máy công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP030",
                            SparepartName = "Giá Đỡ Chỉ Đứng",
                            Specification = "2 trục, cao 60cm",
                            StockQuantity = 55,
                            Unit = "Cái",
                            UnitPrice = 13000m
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeviceReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReportNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AssigneeId");

                    b.ToTable("Tasks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2d3e4-0001-0001-0001-100000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4629),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333333"),
                            DeviceCondition = "Máy hoạt động bình thường sau khi thay mỏ trói chỉ.",
                            DeviceReturnTime = new DateTime(2025, 4, 15, 16, 30, 0, 0, DateTimeKind.Utc),
                            EndTime = new DateTime(2025, 4, 15, 16, 0, 0, 0, DateTimeKind.Utc),
                            ExpectedTime = new DateTime(2025, 4, 16, 10, 30, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            ReportNotes = "Đã kiểm tra và thay mỏ trói chỉ mới, vận hành thử ổn định.",
                            StartTime = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Status = "Completed",
                            TaskDescription = "Sửa lỗi đứt chỉ do mỏ trói chỉ lỏng trên máy Juki DDL-8700 Unit 1 (MC001-JUKI-DDL8700-01).",
                            TaskName = "Repair Juki DDL-8700 Unit 1",
                            TaskType = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0002-0002-0002-100000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4638),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333334"),
                            ExpectedTime = new DateTime(2025, 5, 4, 14, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 3,
                            StartTime = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = "InProgress",
                            TaskDescription = "Sửa lỗi máy không chạy do động cơ cháy trên máy Juki DDL-8700 Unit 3 (MC003-JUKI-DDL8700-03).",
                            TaskName = "Fix Motor Issue on Juki DDL-8700 Unit 3",
                            TaskType = "Repair"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0003-0003-0003-100000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4666),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333335"),
                            ExpectedTime = new DateTime(2025, 5, 13, 9, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 3,
                            StartTime = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Pending",
                            TaskDescription = "Sửa lỗi máy ngừng hoạt động do chập điện trên máy Juki DDL-8700 Unit 4 (MC004-JUKI-DDL8700-04).",
                            TaskName = "Repair Juki DDL-8700 Unit 4",
                            TaskType = "Repair"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0004-0004-0004-100000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4670),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333336"),
                            DeviceCondition = "Máy hoạt động tốt sau khi căn chỉnh trục kim.",
                            DeviceReturnTime = new DateTime(2025, 3, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            EndTime = new DateTime(2025, 3, 20, 15, 0, 0, 0, DateTimeKind.Utc),
                            ExpectedTime = new DateTime(2025, 3, 21, 11, 15, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            ReportNotes = "Đã thay kim mới và căn chỉnh trục kim, kiểm tra vận hành ổn.",
                            StartTime = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Status = "Completed",
                            TaskDescription = "Sửa lỗi kim gãy do lệch tâm trên máy Juki DDL-8700 Unit 7 (MC007-JUKI-DDL8700-07).",
                            TaskName = "Fix Needle Issue on Juki DDL-8700 Unit 7",
                            TaskType = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0005-0005-0005-100000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4675),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333337"),
                            ExpectedTime = new DateTime(2025, 4, 27, 13, 45, 0, 0, DateTimeKind.Utc),
                            Priority = 1,
                            StartTime = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Status = "InProgress",
                            TaskDescription = "Bảo trì tiếng ồn lớn do bánh răng mòn trên máy Juki DDL-8700 Unit 8 (MC008-JUKI-DDL8700-08).",
                            TaskName = "Reduce Noise on Juki DDL-8700 Unit 8",
                            TaskType = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0006-0006-0006-100000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4687),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333338"),
                            ExpectedTime = new DateTime(2025, 5, 8, 8, 20, 0, 0, DateTimeKind.Utc),
                            Priority = 3,
                            StartTime = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Status = "Pending",
                            TaskDescription = "Sửa lỗi đèn báo lỗi do mạch điều khiển trên máy Juki DDL-9000C Unit 1 (MC011-JUKI-DDL9000C-01).",
                            TaskName = "Fix Error Light on Juki DDL-9000C Unit 1",
                            TaskType = "Repair"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0007-0007-0007-100000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4691),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333339"),
                            DeviceCondition = "Máy may đều sau khi siết lại bulong.",
                            DeviceReturnTime = new DateTime(2025, 4, 10, 18, 30, 0, 0, DateTimeKind.Utc),
                            EndTime = new DateTime(2025, 4, 10, 18, 0, 0, 0, DateTimeKind.Utc),
                            ExpectedTime = new DateTime(2025, 4, 11, 16, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            ReportNotes = "Đã siết chặt bulong bộ truyền, kiểm tra đường chỉ ổn định.",
                            StartTime = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Completed",
                            TaskDescription = "Sửa lỗi chỉ không đều do bulong lỏng trên máy Juki DDL-9000C Unit 3 (MC013-JUKI-DDL9000C-03).",
                            TaskName = "Adjust Stitch on Juki DDL-9000C Unit 3",
                            TaskType = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0008-0008-0008-100000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4696),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333340"),
                            ExpectedTime = new DateTime(2025, 5, 17, 12, 10, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            StartTime = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Status = "InProgress",
                            TaskDescription = "Sửa lỗi chỉ dưới không kéo lên trên máy Brother B957 Unit 1 (MC015-BROTHER-B957-01).",
                            TaskName = "Fix Thread Issue on Brother B957 Unit 1",
                            TaskType = "Repair"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0009-0009-0009-100000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4700),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333341"),
                            ExpectedTime = new DateTime(2025, 5, 21, 10, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 3,
                            StartTime = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Pending",
                            TaskDescription = "Sửa lỗi máy không chạy do mô tơ cháy trên máy Singer 4452 Unit 1 (MC018-SINGER-4452-01).",
                            TaskName = "Repair Singer 4452 Unit 1",
                            TaskType = "Repair"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0010-0010-0010-100000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 118, DateTimeKind.Utc).AddTicks(4704),
                            IsDeleted = false,
                            AssigneeId = new Guid("43333333-3333-3333-3333-333333333342"),
                            ExpectedTime = new DateTime(2025, 5, 22, 15, 30, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            StartTime = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Status = "InProgress",
                            TaskDescription = "Sửa lỗi vải bị nhăn do bộ cấp vải không đều trên máy Singer 4452 Unit 3 (MC020-SINGER-4452-03).",
                            TaskName = "Adjust Fabric Feed on Singer 4452 Unit 3",
                            TaskType = "Maintenance"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("StaffID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2100),
                            IsDeleted = false,
                            Email = "hod@gmail.com",
                            FullName = "Head of Department",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 1,
                            UserName = "Head of Department"
                        },
                        new
                        {
                            Id = new Guid("32222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2119),
                            IsDeleted = false,
                            Email = "hot@gmail.com",
                            FullName = "Head of Team",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Team"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2120),
                            IsDeleted = false,
                            Email = "staff@gmail.com",
                            FullName = "Staff Member",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member"
                        },
                        new
                        {
                            Id = new Guid("54444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2122),
                            IsDeleted = false,
                            Email = "sk@gmail.com",
                            FullName = "Support Staff",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 4,
                            UserName = "Support Staff"
                        },
                        new
                        {
                            Id = new Guid("65555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2124),
                            IsDeleted = false,
                            Email = "admin@gmail.com",
                            FullName = "Administrator",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 5,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333334"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2126),
                            IsDeleted = false,
                            Email = "staff2@gmail.com",
                            FullName = "Staff Member 2",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 2"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333335"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2136),
                            IsDeleted = false,
                            Email = "staff3@gmail.com",
                            FullName = "Staff Member 3",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 3"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333336"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2138),
                            IsDeleted = false,
                            Email = "staff4@gmail.com",
                            FullName = "Staff Member 4",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 4"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333337"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2140),
                            IsDeleted = false,
                            Email = "staff5@gmail.com",
                            FullName = "Staff Member 5",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 5"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333338"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2142),
                            IsDeleted = false,
                            Email = "staff6@gmail.com",
                            FullName = "Staff Member 6",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 6"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333339"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2143),
                            IsDeleted = false,
                            Email = "staff7@gmail.com",
                            FullName = "Staff Member 7",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 7"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333340"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2145),
                            IsDeleted = false,
                            Email = "staff8@gmail.com",
                            FullName = "Staff Member 8",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 8"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333341"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2147),
                            IsDeleted = false,
                            Email = "staff9@gmail.com",
                            FullName = "Staff Member 9",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 9"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333342"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2182),
                            IsDeleted = false,
                            Email = "staff10@gmail.com",
                            FullName = "Staff Member 10",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 10"
                        },
                        new
                        {
                            Id = new Guid("23333333-3333-3333-3333-333333333343"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2186),
                            IsDeleted = false,
                            Email = "tech2@gmail.com",
                            FullName = "Head of Tech 2",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Tech 3"
                        },
                        new
                        {
                            Id = new Guid("23333333-3333-3333-3333-333333333344"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 116, DateTimeKind.Utc).AddTicks(2188),
                            IsDeleted = false,
                            Email = "tech3@gmail.com",
                            FullName = "Head of Tech 3",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Tech 3"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZoneCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AreaId");

                    b.HasIndex("ZoneCode")
                        .HasDatabaseName("IX_Areas_ZoneCode");

                    b.ToTable("Zones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1d2e3f4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3398),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3398),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneCode = "A01",
                            ZoneName = "Dây Chuyền May A"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3402),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3403),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneCode = "A02",
                            ZoneName = "Dây Chuyền May B"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3406),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3407),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneCode = "A03",
                            ZoneName = "Dây Chuyền May C"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3409),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3410),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneCode = "A04",
                            ZoneName = "Khu Cắt May"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3413),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3414),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneCode = "A05",
                            ZoneName = "Khu Chuẩn Bị Vải"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3418),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3419),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneCode = "A06",
                            ZoneName = "Dây Chuyền May D"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3421),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3422),
                            AreaId = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            ZoneCode = "B01",
                            ZoneName = "Khu May Nặng A"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3424),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3425),
                            AreaId = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            ZoneCode = "B02",
                            ZoneName = "Khu May Nặng B"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3428),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3428),
                            AreaId = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            ZoneCode = "B03",
                            ZoneName = "Khu Cắt Gọt và Đóng Gói"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3431),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3431),
                            AreaId = new Guid("b1c2d3e4-0003-0003-0003-000000000003"),
                            ZoneCode = "KT1",
                            ZoneName = "Khu Kiểm Tra 1"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3434),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3434),
                            AreaId = new Guid("b1c2d3e4-0003-0003-0003-000000000003"),
                            ZoneCode = "KT2",
                            ZoneName = "Khu Kiểm Tra 2"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3437),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3437),
                            AreaId = new Guid("b1c2d3e4-0004-0004-0004-000000000004"),
                            ZoneCode = "CV1",
                            ZoneName = "Khu Cắt Vải Tự Động"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3440),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3440),
                            AreaId = new Guid("b1c2d3e4-0004-0004-0004-000000000004"),
                            ZoneCode = "CV2",
                            ZoneName = "Khu May Nặng C"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3444),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3445),
                            AreaId = new Guid("b1c2d3e4-0005-0005-0005-000000000005"),
                            ZoneCode = "TV1",
                            ZoneName = "Khu May Nặng D"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3447),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 25, 13, 3, 10, 117, DateTimeKind.Utc).AddTicks(3448),
                            AreaId = new Guid("b1c2d3e4-0006-0006-0006-000000000006"),
                            ZoneCode = "LK1",
                            ZoneName = "Khu Lưu Trữ Máy May"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Report", "Report")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Error");

                    b.Navigation("Report");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("SparepartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("IssueErrors")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("IssueErrors")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("SpareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sparepart");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("RequestIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithMany("RequestIssues")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Device", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany("Devices")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Warranties")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarranty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarrantyHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.EmailTemplate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Error", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "User")
                        .WithOne("Feedback")
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.RequestIssue", "RequestIssue")
                        .WithMany("Images")
                        .HasForeignKey("RequestIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestIssue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Issue", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Machine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Notification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithOne("Position")
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Zone", "Zone")
                        .WithMany("Positions")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Device");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithOne("Report")
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Requests")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Request", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "Sender")
                        .WithMany("Requests")
                        .HasForeignKey("SerderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Device");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Sparepart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.User", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Tasks", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Area", "Area")
                        .WithMany("Zones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Zone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Position");

                    b.Navigation("Requests");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("ErrorSpareparts");

                    b.Navigation("IssueErrors");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.Navigation("IssueErrors");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.Navigation("ErrorDetails");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.Navigation("ErrorSpareparts");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
