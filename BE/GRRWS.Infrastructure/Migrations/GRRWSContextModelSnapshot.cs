// <auto-generated />
using System;
using GRRWS.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GRRWS.Infrastructure.Migrations
{
    [DbContext(typeof(GRRWSContext))]
    partial class GRRWSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GRRWS.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("TaskId");

                    b.ToTable("ErrorDetails", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparepartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int");

                    b.HasKey("ErrorId", "SparepartId");

                    b.HasIndex("SparepartId");

                    b.ToTable("ErrorSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IssueId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.ToTable("IssueErrors", (string)null);

                    b.HasData(
                        new
                        {
                            IssueId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ErrorId = new Guid("55555555-5555-5555-5555-555555555565"),
                            Id = new Guid("49bf7e53-d872-4465-ad0b-c8120fd17425")
                        },
                        new
                        {
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ErrorId = new Guid("22222222-2222-2222-2222-222222222232"),
                            Id = new Guid("d513e9b2-d78a-4ffb-a866-20e61f18402d")
                        },
                        new
                        {
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ErrorId = new Guid("77777777-7777-7777-7777-777777777787"),
                            Id = new Guid("157af2c5-3262-499a-8a7a-383297e12762")
                        },
                        new
                        {
                            IssueId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ErrorId = new Guid("44444444-4444-4444-4444-444444444454"),
                            Id = new Guid("60506f0c-eb36-4108-9d14-a7e95c4b7f36")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("66666666-6666-6666-6666-666666666676"),
                            Id = new Guid("219944ee-e5e8-45ea-a25b-637fd368f034")
                        },
                        new
                        {
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ErrorId = new Guid("33333333-3333-3333-3333-333333333343"),
                            Id = new Guid("166f4255-527b-4d72-9083-ec36194d64ea")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("88888888-8888-8888-8888-888888888898"),
                            Id = new Guid("fa6e7c81-d56d-4e05-8f4f-f5bad8c0da7d")
                        },
                        new
                        {
                            IssueId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ErrorId = new Guid("11111111-1111-1111-1111-111111111121"),
                            Id = new Guid("d275e680-cf3b-4e29-b282-7d6e8b2dd96c")
                        },
                        new
                        {
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ErrorId = new Guid("99999999-9999-9999-9999-999999999109"),
                            Id = new Guid("f02227e7-101b-4fdd-86bb-0db53cec5a4c")
                        },
                        new
                        {
                            IssueId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ErrorId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaba"),
                            Id = new Guid("024d8fe9-e5de-4ccd-a3e7-af5a533d714f")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.Property<Guid>("SpareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpareId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("RepairSpareparts", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("RequestId", "IssueId")
                        .IsUnique()
                        .HasDatabaseName("IX_RequestIssues_RequestId_IssueId");

                    b.ToTable("RequestIssues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111222"),
                            IssueId = new Guid("11111111-1111-1111-1111-111111111111"),
                            RequestId = new Guid("11111111-1111-1111-1111-111111111122"),
                            Status = "Open"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222333"),
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RequestId = new Guid("22222222-2222-2222-2222-222222222233"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333444"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RequestId = new Guid("33333333-3333-3333-3333-333333333344"),
                            Status = "Open"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444555"),
                            IssueId = new Guid("44444444-4444-4444-4444-444444444444"),
                            RequestId = new Guid("44444444-4444-4444-4444-444444444455"),
                            Status = "Closed"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555666"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            RequestId = new Guid("55555555-5555-5555-5555-555555555566"),
                            Status = "Open"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666777"),
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            RequestId = new Guid("66666666-6666-6666-6666-666666666677"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777888"),
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            RequestId = new Guid("77777777-7777-7777-7777-777777777788"),
                            Status = "Open"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888999"),
                            IssueId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RequestId = new Guid("88888888-8888-8888-8888-888888888899"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999101010"),
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RequestId = new Guid("99999999-9999-9999-9999-999999991010"),
                            Status = "Open"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaabbb"),
                            IssueId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            RequestId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaabb"),
                            Status = "Closed"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUnderWarranty")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Devices_DeviceCode")
                        .HasFilter("[DeviceCode] IS NOT NULL");

                    b.HasIndex("MachineId");

                    b.ToTable("Devices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3790),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3790),
                            Description = "Industrial sewing machine for heavy fabrics",
                            DeviceCode = "SM001",
                            DeviceName = "Sewing Machine 1",
                            InstallationDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "Model A",
                            PhotoUrl = "http://example.com/photos/sm001.jpg",
                            PurchasePrice = 1500.00m,
                            SerialNumber = "SN001",
                            Specifications = "{\"speed\": \"1200 SPM\", \"type\": \"Industrial\"}",
                            Status = "Active",
                            Supplier = "Brother Industries"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3796),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3796),
                            Description = "High-speed sewing machine",
                            DeviceCode = "SM002",
                            DeviceName = "Sewing Machine 2",
                            InstallationDate = new DateTime(2019, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            ManufactureDate = new DateTime(2019, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "Model B",
                            PhotoUrl = "http://example.com/photos/sm002.jpg",
                            PurchasePrice = 2000.00m,
                            SerialNumber = "SN002",
                            Specifications = "{\"speed\": \"1500 SPM\", \"type\": \"High-Speed\"}",
                            Status = "InRepair",
                            Supplier = "Juki Corporation"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333334"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3803),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3803),
                            Description = "Fabric cutting machine",
                            DeviceCode = "CM001",
                            DeviceName = "Cutting Machine 1",
                            InstallationDate = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2021, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Pegasus",
                            Model = "Model C",
                            PhotoUrl = "http://example.com/photos/cm001.jpg",
                            PurchasePrice = 1200.00m,
                            SerialNumber = "SN003",
                            Specifications = "{\"blade\": \"10 inch\", \"type\": \"Rotary\"}",
                            Status = "Active",
                            Supplier = "Pegasus Ltd"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444445"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3807),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3808),
                            Description = "Computerized embroidery machine",
                            DeviceCode = "EM001",
                            DeviceName = "Embroidery Machine 1",
                            InstallationDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Bernina",
                            Model = "Model D",
                            PhotoUrl = "http://example.com/photos/em001.jpg",
                            PurchasePrice = 2500.00m,
                            SerialNumber = "SN004",
                            Specifications = "{\"stitches\": \"1000\", \"type\": \"Computerized\"}",
                            Status = "Active",
                            Supplier = "Bernina International"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555556"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3812),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3813),
                            Description = "Heavy-duty sewing machine",
                            DeviceCode = "SM003",
                            DeviceName = "Sewing Machine 3",
                            InstallationDate = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            ManufactureDate = new DateTime(2018, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "Model E",
                            PhotoUrl = "http://example.com/photos/sm003.jpg",
                            PurchasePrice = 1800.00m,
                            SerialNumber = "SN005",
                            Specifications = "{\"speed\": \"1100 SPM\", \"type\": \"Heavy-Duty\"}",
                            Status = "Retired",
                            Supplier = "Singer Corporation"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666667"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3818),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3818),
                            Description = "Compact sewing machine",
                            DeviceCode = "SM004",
                            DeviceName = "Sewing Machine 4",
                            InstallationDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "Model F",
                            PhotoUrl = "http://example.com/photos/sm004.jpg",
                            PurchasePrice = 1000.00m,
                            SerialNumber = "SN006",
                            Specifications = "{\"speed\": \"800 SPM\", \"type\": \"Compact\"}",
                            Status = "Active",
                            Supplier = "Brother Industries"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777778"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3823),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3823),
                            Description = "Automatic fabric cutting machine",
                            DeviceCode = "CM002",
                            DeviceName = "Cutting Machine 2",
                            InstallationDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            ManufactureDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "Model G",
                            PhotoUrl = "http://example.com/photos/cm002.jpg",
                            PurchasePrice = 2200.00m,
                            SerialNumber = "SN007",
                            Specifications = "{\"blade\": \"12 inch\", \"type\": \"Automatic\"}",
                            Status = "InRepair",
                            Supplier = "Juki Corporation"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888889"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3827),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3828),
                            Description = "Multi-needle embroidery machine",
                            DeviceCode = "EM002",
                            DeviceName = "Embroidery Machine 2",
                            InstallationDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            ManufactureDate = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Bernina",
                            Model = "Model H",
                            PhotoUrl = "http://example.com/photos/em002.jpg",
                            PurchasePrice = 3000.00m,
                            SerialNumber = "SN008",
                            Specifications = "{\"stitches\": \"1200\", \"type\": \"Multi-Needle\"}",
                            Status = "Active",
                            Supplier = "Bernina International"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999910"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3836),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3836),
                            Description = "Portable sewing machine",
                            DeviceCode = "SM005",
                            DeviceName = "Sewing Machine 5",
                            InstallationDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2021, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "Model I",
                            PhotoUrl = "http://example.com/photos/sm005.jpg",
                            PurchasePrice = 900.00m,
                            SerialNumber = "SN009",
                            Specifications = "{\"speed\": \"900 SPM\", \"type\": \"Portable\"}",
                            Status = "Active",
                            Supplier = "Singer Corporation"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3842),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(3842),
                            Description = "Overlock sewing machine",
                            DeviceCode = "SM006",
                            DeviceName = "Sewing Machine 6",
                            InstallationDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            ManufactureDate = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Pegasus",
                            Model = "Model J",
                            PhotoUrl = "http://example.com/photos/sm006.jpg",
                            PurchasePrice = 1700.00m,
                            SerialNumber = "SN010",
                            Specifications = "{\"speed\": \"1300 SPM\", \"type\": \"Overlock\"}",
                            Status = "Active",
                            Supplier = "Pegasus Ltd"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("ErrorId");

                    b.HasIndex("DeviceId", "ErrorId");

                    b.ToTable("DeviceErrorHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelatedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceHistories", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("IssueId");

                    b.HasIndex("DeviceId", "IssueId");

                    b.ToTable("DeviceIssueHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarranties", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("DeviceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarrantyHistories", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageMappingsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("EstimatedRepairTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ErrorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Errors_ErrorCode")
                        .HasFilter("[ErrorCode] IS NOT NULL");

                    b.ToTable("Errors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111121"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4408),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4408),
                            Description = "Motor stops working or runs irregularly.",
                            ErrorCode = "ERR001",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = true,
                            Name = "Motor Failure",
                            OccurrenceCount = 5,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222232"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4411),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4412),
                            Description = "Needle breaks during operation.",
                            ErrorCode = "ERR002",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Needle Breakage",
                            OccurrenceCount = 8,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333343"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4415),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4416),
                            Description = "Incorrect thread tension causing uneven stitches.",
                            ErrorCode = "ERR003",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Thread Tension Issue",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444454"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4418),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4418),
                            Description = "Oil leakage from machine components.",
                            ErrorCode = "ERR004",
                            EstimatedRepairTime = new TimeSpan(0, 3, 0, 0, 0),
                            IsCommon = false,
                            Name = "Oil Leak",
                            OccurrenceCount = 2,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555565"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4421),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4421),
                            Description = "Machine overheats after prolonged use.",
                            ErrorCode = "ERR005",
                            EstimatedRepairTime = new TimeSpan(0, 2, 30, 0, 0),
                            IsCommon = true,
                            Name = "Overheating",
                            OccurrenceCount = 6,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666676"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4424),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4424),
                            Description = "Drive belt slips or breaks.",
                            ErrorCode = "ERR006",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Belt Slippage",
                            OccurrenceCount = 3,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777787"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4427),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4427),
                            Description = "Electrical issues causing machine failure.",
                            ErrorCode = "ERR007",
                            EstimatedRepairTime = new TimeSpan(0, 3, 0, 0, 0),
                            IsCommon = false,
                            Name = "Electrical Fault",
                            OccurrenceCount = 1,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888898"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4430),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4430),
                            Description = "Bobbin fails to wind properly.",
                            ErrorCode = "ERR008",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Bobbin Winding Issue",
                            OccurrenceCount = 7,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999109"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4434),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4434),
                            Description = "Machine produces irregular stitches.",
                            ErrorCode = "ERR009",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Stitch Irregularity",
                            OccurrenceCount = 9,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaba"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4437),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(4437),
                            Description = "Foot pedal does not respond.",
                            ErrorCode = "ERR010",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Foot Pedal Failure",
                            OccurrenceCount = 4,
                            Severity = "High"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestIssueId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("IssueKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("int");

                    b.HasIndex("IssueKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Issues_IssueKey")
                        .HasFilter("[IssueKey] IS NOT NULL");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2854),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2854),
                            Description = "Máy may bị nóng sau thời gian sử dụng ngắn.",
                            DisplayName = "Máy Nóng",
                            IsCommon = false,
                            IssueKey = "MAY_NONG"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2861),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2861),
                            Description = "Kim bị gãy trong quá trình may.",
                            DisplayName = "Kim Gãy",
                            IsCommon = false,
                            IssueKey = "KIM_GAY"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2863),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2864),
                            Description = "Máy không khởi động hoặc không hoạt động khi bật công tắc.",
                            DisplayName = "Máy Không Chạy",
                            IsCommon = false,
                            IssueKey = "MAY_KHONG_CHAY"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2866),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2866),
                            Description = "Máy bị chảy dầu ra ngoài, ảnh hưởng đến hoạt động.",
                            DisplayName = "Chảy Dầu",
                            IsCommon = false,
                            IssueKey = "CHAY_DAU"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2868),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2869),
                            Description = "Máy phát ra tiếng ồn lớn bất thường khi hoạt động.",
                            DisplayName = "Kêu To",
                            IsCommon = false,
                            IssueKey = "KEU_TO"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2871),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2871),
                            Description = "Máy làm rách vải trong quá trình may.",
                            DisplayName = "Rách Vải",
                            IsCommon = false,
                            IssueKey = "RACH_VAI"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2876),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2876),
                            Description = "Kim không xuyên đúng vị trí gây lỗi đường may.",
                            DisplayName = "Lưỡi Kim",
                            IsCommon = false,
                            IssueKey = "LUOI_KIM"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2878),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2879),
                            Description = "Chỉ bị đứt liên tục trong quá trình sử dụng.",
                            DisplayName = "Đứt Chỉ",
                            IsCommon = false,
                            IssueKey = "DUT_CHI"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2881),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2881),
                            Description = "Máy không cuốn chỉ hoặc chỉ bị rối.",
                            DisplayName = "Không Cuốn Chỉ",
                            IsCommon = false,
                            IssueKey = "KHONG_CUON_CHI"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2884),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2884),
                            Description = "Máy chạy chậm hoặc không đều tốc độ.",
                            DisplayName = "Máy Chạy Chậm",
                            IsCommon = false,
                            IssueKey = "MAY_CHAY_CHAM"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2886),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2886),
                            Description = "Đường chỉ may không đều, lúc chặt lúc lỏng.",
                            DisplayName = "Chỉ Không Đều",
                            IsCommon = false,
                            IssueKey = "CHI_KHONG_DEU"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2888),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2888),
                            Description = "Đèn báo lỗi trên máy may sáng liên tục.",
                            DisplayName = "Đèn Báo Lỗi",
                            IsCommon = false,
                            IssueKey = "DEN_BAO_LOI"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2890),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2890),
                            Description = "Bàn đạp không phản hồi khi sử dụng.",
                            DisplayName = "Bàn Đạp Không Hoạt Động",
                            IsCommon = false,
                            IssueKey = "BAN_DAP_KHONG_HOAT_DONG"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2892),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2893),
                            Description = "Vải bị nhăn hoặc co kéo trong quá trình may.",
                            DisplayName = "Vải Bị Nhăn",
                            IsCommon = false,
                            IssueKey = "VAI_BI_NHAN"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2897),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2897),
                            Description = "Kim may không di chuyển khi máy hoạt động.",
                            DisplayName = "Kim Không Di Chuyển",
                            IsCommon = false,
                            IssueKey = "KIM_KHONG_DI_CHUYEN"
                        },
                        new
                        {
                            Id = new Guid("12121212-1212-1212-1212-121212121212"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2900),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2901),
                            Description = "Ống chỉ bị kẹt hoặc không quay đúng cách.",
                            DisplayName = "Ống Chỉ Lỗi",
                            IsCommon = false,
                            IssueKey = "ONG_CHI_LOI"
                        },
                        new
                        {
                            Id = new Guid("23232323-2323-2323-2323-232323232323"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2903),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2904),
                            Description = "Dây curoa bị lỏng hoặc đứt, gây ngừng máy.",
                            DisplayName = "Dây Curoa Lỗi",
                            IsCommon = false,
                            IssueKey = "DAY_CUROA_LOI"
                        },
                        new
                        {
                            Id = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2906),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2907),
                            Description = "Chỉ dưới không được kéo lên đúng cách.",
                            DisplayName = "Chỉ Dưới Lỗi",
                            IsCommon = false,
                            IssueKey = "CHI_DUOI_LOI"
                        },
                        new
                        {
                            Id = new Guid("45454545-4545-4545-4545-454545454545"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2910),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2910),
                            Description = "Máy tự động dừng trong khi đang hoạt động.",
                            DisplayName = "Máy Tự Dừng",
                            IsCommon = false,
                            IssueKey = "MAY_TU_DUNG"
                        },
                        new
                        {
                            Id = new Guid("56565656-5656-5656-5656-565656565656"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2913),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2913),
                            Description = "Nút điều chỉnh độ căng chỉ không hoạt động.",
                            DisplayName = "Nút Điều Chỉnh Lỗi",
                            IsCommon = false,
                            IssueKey = "NUT_DIEU_CHINH_LOI"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MachineCode")
                        .IsUnique()
                        .HasFilter("[MachineCode] IS NOT NULL");

                    b.ToTable("Machines", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("ErrorId");

                    b.HasIndex("MachineId", "ErrorId");

                    b.ToTable("MachineErrorHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("IssueId");

                    b.HasIndex("MachineId", "IssueId");

                    b.ToTable("MachineIssueHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasFilter("[DeviceId] IS NOT NULL");

                    b.HasIndex("ZoneId");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SerderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SerderId");

                    b.ToTable("Requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111122"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6816),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6817),
                            Description = "Sewing machine overheating issue.",
                            DeviceId = new Guid("11111111-1111-1111-1111-111111111112"),
                            DueDate = new DateTime(2025, 5, 24, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6797),
                            Priority = "High",
                            RequestTitle = "Repair Sewing Machine 1",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222233"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6822),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6822),
                            Description = "Needle broke during operation.",
                            DeviceId = new Guid("22222222-2222-2222-2222-222222222223"),
                            DueDate = new DateTime(2025, 5, 23, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6819),
                            Priority = "Medium",
                            RequestTitle = "Fix Needle Breakage",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333344"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6827),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6827),
                            Description = "Machine fails to start.",
                            DeviceId = new Guid("33333333-3333-3333-3333-333333333334"),
                            DueDate = new DateTime(2025, 5, 25, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6824),
                            Priority = "High",
                            RequestTitle = "Machine Not Starting",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444455"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6832),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6832),
                            Description = "Oil leaking from machine.",
                            DeviceId = new Guid("44444444-4444-4444-4444-444444444445"),
                            DueDate = new DateTime(2025, 5, 26, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6830),
                            Priority = "High",
                            RequestTitle = "Oil Leak Repair",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Denied"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555566"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6840),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6840),
                            Description = "Machine making loud noise.",
                            DeviceId = new Guid("55555555-5555-5555-5555-555555555556"),
                            DueDate = new DateTime(2025, 5, 24, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6837),
                            Priority = "Medium",
                            RequestTitle = "Noise Issue",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666677"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6846),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6846),
                            Description = "Thread tension causing uneven stitches.",
                            DeviceId = new Guid("66666666-6666-6666-6666-666666666667"),
                            DueDate = new DateTime(2025, 5, 23, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6843),
                            Priority = "Medium",
                            RequestTitle = "Thread Tension Adjustment",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777788"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6850),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6851),
                            Description = "Bobbin not winding properly.",
                            DeviceId = new Guid("77777777-7777-7777-7777-777777777778"),
                            DueDate = new DateTime(2025, 5, 24, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6848),
                            Priority = "Low",
                            RequestTitle = "Bobbin Issue",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888899"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6880),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6881),
                            Description = "Machine running slower than usual.",
                            DeviceId = new Guid("88888888-8888-8888-8888-888888888889"),
                            DueDate = new DateTime(2025, 5, 25, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6877),
                            Priority = "Medium",
                            RequestTitle = "Slow Machine Operation",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999991010"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6888),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6888),
                            Description = "Irregular stitches detected.",
                            DeviceId = new Guid("99999999-9999-9999-9999-999999999910"),
                            DueDate = new DateTime(2025, 5, 24, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6883),
                            Priority = "Medium",
                            RequestTitle = "Stitch Irregularity",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaabb"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6893),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6894),
                            Description = "Foot pedal not responding.",
                            DeviceId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            DueDate = new DateTime(2025, 5, 23, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(6890),
                            Priority = "High",
                            RequestTitle = "Foot Pedal Repair",
                            RequestedById = new Guid("43333333-3333-3333-3333-333333333333"),
                            SerderId = new Guid("43333333-3333-3333-3333-333333333333"),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparepartCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SparepartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("SparepartCode")
                        .IsUnique()
                        .HasFilter("[SparepartCode] IS NOT NULL");

                    b.ToTable("Spareparts", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeviceReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReportNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AssigneeId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("StaffID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(1954),
                            IsDeleted = false,
                            Email = "hod@gmail.com",
                            FullName = "Head of Department",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 1,
                            UserName = "Head of Department"
                        },
                        new
                        {
                            Id = new Guid("32222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(1977),
                            IsDeleted = false,
                            Email = "hot@gmail.com",
                            FullName = "Head of Team",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Team"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(1980),
                            IsDeleted = false,
                            Email = "staff@gmail.com",
                            FullName = "Staff Member",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member"
                        },
                        new
                        {
                            Id = new Guid("54444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2044),
                            IsDeleted = false,
                            Email = "sk@gmail.com",
                            FullName = "Support Staff",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 4,
                            UserName = "Support Staff"
                        },
                        new
                        {
                            Id = new Guid("65555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 21, 11, 12, 8, 29, DateTimeKind.Utc).AddTicks(2046),
                            IsDeleted = false,
                            Email = "admin@gmail.com",
                            FullName = "Administrator",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 5,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AreaId");

                    b.ToTable("Zones", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Report", "Report")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Error");

                    b.Navigation("Report");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("SparepartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("IssueErrors")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("IssueErrors")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("SpareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sparepart");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("RequestIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithMany("RequestIssues")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Device", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany("Devices")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceErrorHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceIssueHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Warranties")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarranty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarrantyHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.EmailTemplate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Error", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "User")
                        .WithOne("Feedback")
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.RequestIssue", "RequestIssue")
                        .WithMany("Images")
                        .HasForeignKey("RequestIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestIssue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Issue", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Machine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.MachineErrorHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.MachineIssueHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Notification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithOne("Position")
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Zone", "Zone")
                        .WithMany("Positions")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Device");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithOne("Report")
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Requests")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Request", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "Sender")
                        .WithMany("Requests")
                        .HasForeignKey("SerderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Device");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Sparepart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.User", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Tasks", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Area", "Area")
                        .WithMany("Zones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Zone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Position");

                    b.Navigation("Requests");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("ErrorSpareparts");

                    b.Navigation("IssueErrors");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.Navigation("IssueErrors");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.Navigation("ErrorDetails");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.Navigation("ErrorSpareparts");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
