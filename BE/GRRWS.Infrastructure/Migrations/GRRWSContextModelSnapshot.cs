// <auto-generated />
using System;
using GRRWS.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GRRWS.Infrastructure.Migrations
{
    [DbContext(typeof(GRRWSContext))]
    partial class GRRWSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GRRWS.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("DeviceId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("DeviceId", "ErrorId");

                    b.ToTable("DeviceErrorHistories");

                    b.HasData(
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3491),
                            Id = new Guid("aad730b2-fbb6-4fb8-b9bc-cb2f8657c07d"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Mỏ trói chỉ bị lỏng, đã điều chỉnh lực siết.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3499),
                            Id = new Guid("cd73a3fb-dc96-4a26-9b64-dd03150de8ae"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Động cơ cháy do quá tải, cần thay mô tơ mới.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3505),
                            Id = new Guid("0211d2db-318d-4b27-8445-4d041a21a5a1"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị chập điện, đang chờ phụ tùng thay thế.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3508),
                            Id = new Guid("e5d4ac7f-daa9-40c1-b591-ae3169eb34a7"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim lệch tâm, đã căn chỉnh lại trục kim.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3511),
                            Id = new Guid("0576a0a2-33f3-4742-b5ce-6ee79ba6ad0c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Bánh răng mòn gây tiếng ồn, đã lên kế hoạch thay mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3514),
                            Id = new Guid("d7cff4e0-427b-4d35-8710-b8eeb06cce72"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Bo mạch điều khiển lỗi, đang kiểm tra để sửa chữa.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3519),
                            Id = new Guid("e4a23562-23e2-42a7-a316-ba3e8d89006f"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Bulong lỏng ở bộ truyền, đã siết chặt lại.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3522),
                            Id = new Guid("8012b548-e38a-4f41-9ff0-bfc912f8df15"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Cảm biến vải không nhận, đã thay cảm biến mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3525),
                            Id = new Guid("199845d0-2773-4dd9-b9ae-59924aeb3886"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị cháy, đang chờ thay thế phụ tùng.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(3527),
                            Id = new Guid("31510e37-7786-49fa-8619-8258b6cdfaaf"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Bộ cấp vải hoạt động không đều, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("DeviceId", "IssueId");

                    b.HasIndex("IssueId");

                    b.HasIndex("DeviceId", "IssueId");

                    b.ToTable("DeviceIssueHistories");

                    b.HasData(
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5652),
                            Id = new Guid("86553d68-6660-4a8c-8be1-9c4aa1897074"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ bị đứt do kẹt ở ống chỉ, đã thay ống chỉ mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5659),
                            Id = new Guid("f60f8d52-03a0-475d-9602-b5bc2447dbbf"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy do lỗi động cơ, đang chờ sửa chữa.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5661),
                            Id = new Guid("0cd0f1a8-6108-4d46-98f8-b038d6db8925"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy ngừng hoạt động, kiểm tra phát hiện lỗi dây điện.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5686),
                            Id = new Guid("74c24c69-81c6-4bd1-87bf-2fbb27941c28"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim gãy do sử dụng sai loại kim, đã thay kim phù hợp.",
                            OccurrenceCount = 4
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5691),
                            Id = new Guid("711d287c-1c61-42b9-aeed-1f7bc53b035c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Tiếng ồn lớn do bánh răng mòn, cần thay thế.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5695),
                            Id = new Guid("8b1e3ea7-b3cf-49e8-b372-0ffa588ecd9c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Đèn báo lỗi sáng, kiểm tra mạch điện tử đang được tiến hành.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5698),
                            Id = new Guid("89caa753-acf6-4c18-9e49-f77bf14bef06"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ không đều do bulong lỏng, đã siết lại.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5700),
                            Id = new Guid("7cd5dd20-cedb-4bc2-af91-45bb9b1d1282"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ dưới không kéo lên, kiểm tra cảm biến và thay mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5703),
                            Id = new Guid("b919c148-c1d7-42c2-854d-2d95b501b93c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy, kiểm tra phát hiện lỗi mô tơ.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5705),
                            Id = new Guid("c76d0016-fccf-434d-8867-c7adef5c6551"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Vải bị nhăn do điều chỉnh áp suất không đúng, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("TaskId");

                    b.ToTable("ErrorDetails", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparepartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int");

                    b.HasKey("ErrorId", "SparepartId");

                    b.HasIndex("SparepartId");

                    b.ToTable("ErrorSpareparts");

                    b.HasData(
                        new
                        {
                            ErrorId = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000003"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000002"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000007"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000009"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a999-0009-0009-0009-000000000009"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000017"),
                            QuantityNeeded = 3
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000013"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000019"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000015"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000024"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000001"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a136-0028-0028-0028-000000000028"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000020"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000007"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000001"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000006"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000012"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000027"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000028"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000021"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000029"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000014"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000008"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000030"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000026"),
                            QuantityNeeded = 1
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IssueId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.ToTable("IssueErrors", (string)null);

                    b.HasData(
                        new
                        {
                            IssueId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ErrorId = new Guid("e1d1a123-0015-0015-0015-000000000015")
                        },
                        new
                        {
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014")
                        },
                        new
                        {
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004")
                        },
                        new
                        {
                            IssueId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ErrorId = new Guid("e1d1a666-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("e1d1addd-0011-0011-0011-000000000011")
                        },
                        new
                        {
                            IssueId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ErrorId = new Guid("e1d1aeee-0012-0012-0012-000000000012")
                        },
                        new
                        {
                            IssueId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024")
                        },
                        new
                        {
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013")
                        },
                        new
                        {
                            IssueId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ErrorId = new Guid("e1d1a333-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026")
                        },
                        new
                        {
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008")
                        },
                        new
                        {
                            IssueId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ErrorId = new Guid("e1d1a111-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020")
                        },
                        new
                        {
                            IssueId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016")
                        },
                        new
                        {
                            IssueId = new Guid("23232323-2323-2323-2323-232323232323"),
                            ErrorId = new Guid("e1d1a222-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            IssueId = new Guid("23232323-2323-2323-2323-232323232323"),
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013")
                        },
                        new
                        {
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018")
                        },
                        new
                        {
                            IssueId = new Guid("12121212-1212-1212-1212-121212121212"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026")
                        },
                        new
                        {
                            IssueId = new Guid("12121212-1212-1212-1212-121212121212"),
                            ErrorId = new Guid("e1d1a131-0023-0023-0023-000000000023")
                        },
                        new
                        {
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008")
                        },
                        new
                        {
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            ErrorId = new Guid("e1d1a137-0029-0029-0029-000000000029")
                        },
                        new
                        {
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027")
                        },
                        new
                        {
                            IssueId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("MachineId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("MachineId", "ErrorId");

                    b.ToTable("MachineErrorHistories");

                    b.HasData(
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8174),
                            Id = new Guid("82abe7b6-3378-48d8-b0cc-6aa73f753d9c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Mỏ trói chỉ bị lỏng, đã điều chỉnh lực siết.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8181),
                            Id = new Guid("c8be4d9b-4259-41b2-a4f9-94ba8e677aab"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Động cơ cháy do quá tải, cần thay mô tơ mới.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8185),
                            Id = new Guid("783edf25-3ce2-43e9-9a52-b4d0cd4ab034"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị chập điện, đang chờ phụ tùng thay thế.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8187),
                            Id = new Guid("715a72e6-b40d-41e7-905a-04081d806e9c"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim lệch tâm, đã căn chỉnh lại trục kim.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8193),
                            Id = new Guid("c5147ee3-3dc7-4163-88d7-0d2519464332"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Bánh răng mòn gây tiếng ồn, đã lên kế hoạch thay mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8197),
                            Id = new Guid("a7426a8a-6fb3-4e87-bcc1-61c144d61a93"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Bo mạch điều khiển lỗi, đang kiểm tra để sửa chữa.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8199),
                            Id = new Guid("f0fc8279-bf30-4d95-a221-8b18ab8e7df3"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Bulong lỏng ở bộ truyền, đã siết chặt lại.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8202),
                            Id = new Guid("8c88c229-11ec-45b5-88fc-260e4dffe425"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Cảm biến vải không nhận, đã thay cảm biến mới.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8206),
                            Id = new Guid("b3511592-efe0-4b80-9258-126ab1406017"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Mô tơ bị cháy, đang chờ thay thế phụ tùng.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(8209),
                            Id = new Guid("383d4791-f312-4fd5-a4e6-d12c86d7e63e"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Bộ cấp vải hoạt động không đều, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("MachineId", "IssueId");

                    b.HasIndex("IssueId");

                    b.HasIndex("MachineId", "IssueId");

                    b.ToTable("MachineIssueHistories");

                    b.HasData(
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(407),
                            Id = new Guid("84631d4a-fc02-436e-a9f1-60b365cbf89b"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ bị đứt do kẹt ở ống chỉ, đã thay ống chỉ mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(414),
                            Id = new Guid("ac9a90cc-5cef-4aa0-adca-6c15d22058c1"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy do lỗi động cơ, đang chờ sửa chữa.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(418),
                            Id = new Guid("5bc7816b-141e-4fd5-9fa1-a3ceaa190848"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy ngừng hoạt động, kiểm tra phát hiện lỗi dây điện.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(420),
                            Id = new Guid("a01c9ebe-be98-4b6d-af46-18e7d25c7d52"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 3, 20, 11, 15, 0, 0, DateTimeKind.Utc),
                            Notes = "Kim gãy do sử dụng sai loại kim, đã thay kim phù hợp.",
                            OccurrenceCount = 4
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(422),
                            Id = new Guid("ff27eb2d-c630-4352-b11f-ebde43619b8f"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 25, 13, 45, 0, 0, DateTimeKind.Utc),
                            Notes = "Tiếng ồn lớn do bánh răng mòn, cần thay thế.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(424),
                            Id = new Guid("289affdb-9c85-4b6e-87a5-d85432a14b1e"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 5, 8, 20, 0, 0, DateTimeKind.Utc),
                            Notes = "Đèn báo lỗi sáng, kiểm tra mạch điện tử đang được tiến hành.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(431),
                            Id = new Guid("f959d734-c5f9-4756-8d61-f63d89eafc89"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 4, 10, 16, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ không đều do bulong lỏng, đã siết lại.",
                            OccurrenceCount = 2
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(433),
                            Id = new Guid("01d3d6df-efc8-4ba2-928c-e433aa9dca67"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 15, 12, 10, 0, 0, DateTimeKind.Utc),
                            Notes = "Chỉ dưới không kéo lên, kiểm tra cảm biến và thay mới.",
                            OccurrenceCount = 3
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(436),
                            Id = new Guid("62f3ccf6-c58d-4fda-9d4c-f6ff2ad98186"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Máy không chạy, kiểm tra phát hiện lỗi mô tơ.",
                            OccurrenceCount = 1
                        },
                        new
                        {
                            MachineId = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 431, DateTimeKind.Utc).AddTicks(439),
                            Id = new Guid("864ce8c3-10a2-4d4b-b933-abcde6f8d501"),
                            IsDeleted = false,
                            LastOccurredDate = new DateTime(2025, 5, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Notes = "Vải bị nhăn do điều chỉnh áp suất không đúng, đã điều chỉnh lại.",
                            OccurrenceCount = 2
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.Property<Guid>("SpareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpareId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("RepairSpareparts", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("RequestId", "IssueId")
                        .IsUnique();

                    b.ToTable("RequestIssues", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AreaName")
                        .IsUnique()
                        .HasDatabaseName("IX_Areas_AreaName")
                        .HasFilter("[AreaName] IS NOT NULL");

                    b.ToTable("Areas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(548),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(548),
                            AreaName = "Main Production Floor"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(550),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(551),
                            AreaName = "Finishing Department"
                        },
                        new
                        {
                            Id = new Guid("b1c2d3e4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(553),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(553),
                            AreaName = "Quality Control Area"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUnderWarranty")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Devices_DeviceCode")
                        .HasFilter("[DeviceCode] IS NOT NULL");

                    b.HasIndex("MachineId");

                    b.ToTable("Devices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9338),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9339),
                            Description = "Single needle lockstitch device for lightweight fabrics.",
                            DeviceCode = "DEV001-JUKI-DDL8700-01",
                            DeviceName = "Juki DDL-8700 Unit 1",
                            InstallationDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            ManufactureDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0001-0001-0001-000000000001"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D001",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9346),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9346),
                            Description = "Single needle lockstitch device for medium-weight fabrics.",
                            DeviceCode = "DEV002-JUKI-DDL8700-02",
                            DeviceName = "Juki DDL-8700 Unit 2",
                            InstallationDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0002-0002-0002-000000000002"),
                            ManufactureDate = new DateTime(2020, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0002-0002-0002-000000000002"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D002",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9352),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9352),
                            Description = "Single needle lockstitch device, currently in repair.",
                            DeviceCode = "DEV003-JUKI-DDL8700-03",
                            DeviceName = "Juki DDL-8700 Unit 3",
                            InstallationDate = new DateTime(2020, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            ManufactureDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_03.jpg",
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D003",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "InRepair",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9393),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9393),
                            Description = "Single needle lockstitch device for cotton fabrics.",
                            DeviceCode = "DEV004-JUKI-DDL8700-04",
                            DeviceName = "Juki DDL-8700 Unit 4",
                            InstallationDate = new DateTime(2020, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            ManufactureDate = new DateTime(2020, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_04.jpg",
                            PositionId = new Guid("f1e2d3c4-0003-0003-0003-000000000003"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D004",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9405),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9405),
                            Description = "Single needle lockstitch device for synthetic fabrics.",
                            DeviceCode = "DEV005-JUKI-DDL8700-05",
                            DeviceName = "Juki DDL-8700 Unit 5",
                            InstallationDate = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0005-0005-0005-000000000005"),
                            ManufactureDate = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_05.jpg",
                            PositionId = new Guid("f1e2d3c4-0004-0004-0004-000000000004"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D005",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9410),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9411),
                            Description = "Single needle lockstitch device, retired.",
                            DeviceCode = "DEV006-JUKI-DDL8700-06",
                            DeviceName = "Juki DDL-8700 Unit 6",
                            InstallationDate = new DateTime(2020, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0006-0006-0006-000000000006"),
                            ManufactureDate = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_06.jpg",
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D006",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Retired",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9417),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9417),
                            Description = "Single needle lockstitch device for heavy fabrics.",
                            DeviceCode = "DEV007-JUKI-DDL8700-07",
                            DeviceName = "Juki DDL-8700 Unit 7",
                            InstallationDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            ManufactureDate = new DateTime(2020, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_07.jpg",
                            PositionId = new Guid("f1e2d3c4-0006-0006-0006-000000000006"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D007",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9423),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9424),
                            Description = "Single needle lockstitch device for thin fabrics.",
                            DeviceCode = "DEV008-JUKI-DDL8700-08",
                            DeviceName = "Juki DDL-8700 Unit 8",
                            InstallationDate = new DateTime(2020, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            ManufactureDate = new DateTime(2020, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_08.jpg",
                            PositionId = new Guid("f1e2d3c4-0007-0007-0007-000000000007"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D008",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9429),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9430),
                            Description = "Single needle lockstitch device for mixed fabrics.",
                            DeviceCode = "DEV009-JUKI-DDL8700-09",
                            DeviceName = "Juki DDL-8700 Unit 9",
                            InstallationDate = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0009-0009-0009-000000000009"),
                            ManufactureDate = new DateTime(2020, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_09.jpg",
                            PositionId = new Guid("f1e2d3c4-0010-0010-0010-000000000010"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D009",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9438),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9438),
                            Description = "Single needle lockstitch device for general use.",
                            DeviceCode = "DEV010-JUKI-DDL8700-10",
                            DeviceName = "Juki DDL-8700 Unit 10",
                            InstallationDate = new DateTime(2020, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0010-0010-0010-000000000010"),
                            ManufactureDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl8700_10.jpg",
                            PositionId = new Guid("f1e2d3c4-0011-0011-0011-000000000011"),
                            PurchasePrice = 15000000m,
                            SerialNumber = "J8700-D010",
                            Specifications = "Max speed: 5500 SPM, Stitch length: 5mm",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9446),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9447),
                            Description = "Digital lockstitch device with auto thread trimmer, unit 1.",
                            DeviceCode = "DEV011-JUKI-DDL9000C-01",
                            DeviceName = "Juki DDL-9000C Unit 1",
                            InstallationDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            ManufactureDate = new DateTime(2022, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0008-0008-0008-000000000008"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D001",
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9457),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9457),
                            Description = "Digital lockstitch device with auto thread trimmer, unit 2.",
                            DeviceCode = "DEV012-JUKI-DDL9000C-02",
                            DeviceName = "Juki DDL-9000C Unit 2",
                            InstallationDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0012-0012-0012-000000000012"),
                            ManufactureDate = new DateTime(2022, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0012-0012-0012-000000000012"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D002",
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9463),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9463),
                            Description = "Digital lockstitch device with auto thread trimmer, in repair.",
                            DeviceCode = "DEV013-JUKI-DDL9000C-03",
                            DeviceName = "Juki DDL-9000C Unit 3",
                            InstallationDate = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            ManufactureDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_03.jpg",
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D003",
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer",
                            Status = "InRepair",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9471),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9471),
                            Description = "Digital lockstitch device with auto thread trimmer, unit 4.",
                            DeviceCode = "DEV014-JUKI-DDL9000C-04",
                            DeviceName = "Juki DDL-9000C Unit 4",
                            InstallationDate = new DateTime(2022, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0014-0014-0014-000000000014"),
                            ManufactureDate = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/device_juki_ddl9000c_04.jpg",
                            PositionId = new Guid("f1e2d3c4-0013-0013-0013-000000000013"),
                            PurchasePrice = 20000000m,
                            SerialNumber = "J9000C-D004",
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer",
                            Status = "Active",
                            Supplier = "Juki Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9477),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9477),
                            Description = "Three-thread overlock device for lightweight fabrics.",
                            DeviceCode = "DEV015-BROTHER-B957-01",
                            DeviceName = "Brother B957 Unit 1",
                            InstallationDate = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            ManufactureDate = new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/device_brother_b957_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0019-0019-0019-000000000019"),
                            PurchasePrice = 12000000m,
                            SerialNumber = "B957-D001",
                            Specifications = "Max speed: 7000 SPM, Differential feed ratio: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9483),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9483),
                            Description = "Three-thread overlock device for synthetic fabrics.",
                            DeviceCode = "DEV016-BROTHER-B957-02",
                            DeviceName = "Brother B957 Unit 2",
                            InstallationDate = new DateTime(2019, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0016-0016-0016-000000000016"),
                            ManufactureDate = new DateTime(2019, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/device_brother_b957_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0020-0020-0020-000000000020"),
                            PurchasePrice = 12000000m,
                            SerialNumber = "B957-D002",
                            Specifications = "Max speed: 7000 SPM, Differential feed ratio: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9493),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9493),
                            Description = "Three-thread overlock device for thin materials.",
                            DeviceCode = "DEV017-BROTHER-B957-03",
                            DeviceName = "Brother B957 Unit 3",
                            InstallationDate = new DateTime(2019, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = false,
                            MachineId = new Guid("a1b2c3d4-0017-0017-0017-000000000017"),
                            ManufactureDate = new DateTime(2019, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/device_brother_b957_03.jpg",
                            PositionId = new Guid("f1e2d3c4-0021-0021-0021-000000000021"),
                            PurchasePrice = 12000000m,
                            SerialNumber = "B957-D003",
                            Specifications = "Max speed: 7000 SPM, Differential feed ratio: 0.7-2.0",
                            Status = "Active",
                            Supplier = "Brother Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9498),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9499),
                            Description = "Heavy-duty device for denim fabrics.",
                            DeviceCode = "DEV018-SINGER-4452-01",
                            DeviceName = "Singer 4452 Unit 1",
                            InstallationDate = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            ManufactureDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/device_singer_4452_01.jpg",
                            PositionId = new Guid("f1e2d3c4-0023-0023-0023-000000000023"),
                            PurchasePrice = 18000000m,
                            SerialNumber = "S4452-D001",
                            Specifications = "Max speed: 1100 SPM, Presser foot lift: 6mm",
                            Status = "Active",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9504),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9504),
                            Description = "Heavy-duty device for leather fabrics.",
                            DeviceCode = "DEV019-SINGER-4452-02",
                            DeviceName = "Singer 4452 Unit 2",
                            InstallationDate = new DateTime(2021, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0019-0019-0019-000000000019"),
                            ManufactureDate = new DateTime(2021, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/device_singer_4452_02.jpg",
                            PositionId = new Guid("f1e2d3c4-0024-0024-0024-000000000024"),
                            PurchasePrice = 18000000m,
                            SerialNumber = "S4452-D002",
                            Specifications = "Max speed: 1100 SPM, Presser foot lift: 6mm",
                            Status = "Active",
                            Supplier = "Singer Vietnam"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9509),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9509),
                            Description = "Heavy-duty device for canvas, in repair.",
                            DeviceCode = "DEV020-SINGER-4452-03",
                            DeviceName = "Singer 4452 Unit 3",
                            InstallationDate = new DateTime(2021, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsUnderWarranty = true,
                            MachineId = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            ManufactureDate = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/device_singer_4452_03.jpg",
                            PurchasePrice = 18000000m,
                            SerialNumber = "S4452-D003",
                            Specifications = "Max speed: 1100 SPM, Presser foot lift: 6mm",
                            Status = "InRepair",
                            Supplier = "Singer Vietnam"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelatedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceHistories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33cc4a77-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5891),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5892),
                            ActionType = "Warranty",
                            ComponentCode = "TNS-001",
                            ComponentName = "Thread Tension Unit",
                            Cost = 0m,
                            Description = "Bảo hành máy do lỗi đứt chỉ liên tục",
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_01.pdf",
                            EventDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Lỗi kỹ thuật từ nhà sản xuất trong cơ chế căng chỉ",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5900),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5900),
                            ActionType = "Repair",
                            ComponentCode = "MTR-001",
                            ComponentName = "Motor",
                            Cost = 1500000m,
                            Description = "Sửa chữa máy do hỏng động cơ",
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DocumentUrl = "https://example.com/docs/repair_juki_ddl8700_03.pdf",
                            EventDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Động cơ bị cháy do quá tải trong sản xuất",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5907),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5907),
                            ActionType = "Replacement",
                            ComponentCode = "MTR-002",
                            ComponentName = "Motor",
                            Cost = 2000000m,
                            Description = "Thay thế động cơ cho máy Juki DDL-8700",
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            DocumentUrl = "https://example.com/docs/replacement_juki_ddl8700_04.pdf",
                            EventDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Động cơ cũ bị hỏng do sử dụng lâu dài",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5912),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5912),
                            ActionType = "Warranty",
                            ComponentCode = "NDL-001",
                            ComponentName = "Needle Bar",
                            Cost = 0m,
                            Description = "Bảo hành máy do kẹt kim",
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_07.pdf",
                            EventDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Lỗi cơ chế kim từ nhà sản xuất",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5917),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5917),
                            ActionType = "Repair",
                            ComponentCode = "BRG-001",
                            ComponentName = "Bearing",
                            Cost = 800000m,
                            Description = "Sửa chữa tiếng ồn bất thường từ máy",
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            DocumentUrl = "https://example.com/docs/repair_juki_ddl8700_08.pdf",
                            EventDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Ổ bi bị mòn do thiếu bôi trơn",
                            Status = "Failed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5926),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5927),
                            ActionType = "Warranty",
                            ComponentCode = "CTR-001",
                            ComponentName = "Control Unit",
                            Cost = 0m,
                            Description = "Bảo hành máy do lỗi hiệu chỉnh cắt chỉ tự động",
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_01.pdf",
                            EventDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Hệ thống điều khiển số bị lỗi từ nhà sản xuất",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5932),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5932),
                            ActionType = "Repair",
                            ComponentCode = "CTR-002",
                            ComponentName = "Thread Trimmer",
                            Cost = 1200000m,
                            Description = "Sửa chữa máy do lỗi hệ thống cắt chỉ",
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            DocumentUrl = "https://example.com/docs/repair_juki_ddl9000c_03.pdf",
                            EventDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Juki Vietnam",
                            Reason = "Bộ phận cắt chỉ bị kẹt do hao mòn",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5937),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5937),
                            ActionType = "Replacement",
                            ComponentCode = "DFD-001",
                            ComponentName = "Differential Feed Dog",
                            Cost = 1000000m,
                            Description = "Thay thế bộ phận cấp liệu khác biệt",
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            DocumentUrl = "https://example.com/docs/replacement_brother_b957_01.pdf",
                            EventDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Brother Vietnam",
                            Reason = "Bộ phận cấp liệu bị hỏng do sử dụng sai",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5942),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5943),
                            ActionType = "Warranty",
                            ComponentCode = "PWR-001",
                            ComponentName = "Power Board",
                            Cost = 0m,
                            Description = "Bảo hành máy do sự cố nguồn điện",
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            DocumentUrl = "https://example.com/docs/warranty_singer_4452_01.pdf",
                            EventDate = new DateTime(2022, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Singer Vietnam",
                            Reason = "Bo mạch nguồn bị lỗi từ nhà sản xuất",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("33cc4a77-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5947),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(5947),
                            ActionType = "Repair",
                            ComponentCode = "PFT-001",
                            ComponentName = "Presser Foot Mechanism",
                            Cost = 900000m,
                            Description = "Sửa chữa máy do hỏng cơ chế chân vịt",
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            DocumentUrl = "https://example.com/docs/repair_singer_4452_03.pdf",
                            EventDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Provider = "Singer Vietnam",
                            Reason = "Cơ chế chân vịt bị mòn do sử dụng lâu dài",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarranties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e2f3a4-0001-4001-8001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6041),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6042),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_01.pdf",
                            Notes = "Bảo hành định kỳ cho máy mới, bao gồm kiểm tra cơ chế căng chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-001",
                            WarrantyEndDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Máy mới",
                            WarrantyStartDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0002-4002-8002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6048),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6049),
                            Cost = 500000m,
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_03.pdf",
                            Notes = "Gia hạn bảo hành sau sửa chữa động cơ bị cháy",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP007",
                            SparePartName = "Mô Tơ Máy May",
                            Status = "Pending",
                            WarrantyCode = "WAR-JUKI-002",
                            WarrantyEndDate = new DateTime(2026, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Sau sửa chữa",
                            WarrantyStartDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Extended"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0003-4003-8003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6053),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6053),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_04.pdf",
                            Notes = "Bảo hành sau khi thay thế động cơ do hỏng hóc",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP007",
                            SparePartName = "Mô Tơ Máy May",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-003",
                            WarrantyEndDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Sau thay thế",
                            WarrantyStartDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0004-4004-8004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6058),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6058),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl8700_07.pdf",
                            Notes = "Bảo hành máy mới, kiểm tra và sửa lỗi kẹt kim",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP009",
                            SparePartName = "Trụ Gắn Kim",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-004",
                            WarrantyEndDate = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Máy mới",
                            WarrantyStartDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0005-4005-8005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6062),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6062),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_01.pdf",
                            Notes = "Bảo hành máy mới, hiệu chỉnh hệ thống cắt chỉ tự động",
                            Provider = "Juki Vietnam",
                            SparePartCode = "SP029",
                            SparePartName = "Bộ Điều Khiển Điện Tử",
                            Status = "Completed",
                            WarrantyCode = "WAR-JUKI-005",
                            WarrantyEndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Máy mới",
                            WarrantyStartDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Manufacturer"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0006-4006-8006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6066),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6067),
                            Cost = 500000m,
                            DeviceId = new Guid("d1e2f3a4-0013-0013-0013-000000000013"),
                            DocumentUrl = "https://example.com/docs/warranty_juki_ddl9000c_03.pdf",
                            Notes = "Gia hạn bảo hành sau sửa chữa bộ phận cắt chỉ",
                            Provider = "Juki Vietnam",
                            Status = "Pending",
                            WarrantyCode = "WAR-JUKI-006",
                            WarrantyEndDate = new DateTime(2026, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Sau sửa chữa",
                            WarrantyStartDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Extended"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0007-4007-8007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6071),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6071),
                            Cost = 1000000m,
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            DocumentUrl = "https://example.com/docs/warranty_brother_b957_01.pdf",
                            Notes = "Bảo hành bên thứ ba sau thay thế bộ phận cấp liệu khác biệt",
                            Provider = "Brother Vietnam",
                            Status = "Completed",
                            WarrantyCode = "WAR-BROTHER-001",
                            WarrantyEndDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Sau thay thế",
                            WarrantyStartDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "ThirdParty"
                        },
                        new
                        {
                            Id = new Guid("d1e2f3a4-0008-4008-8008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6075),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(6075),
                            Cost = 0m,
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            DocumentUrl = "https://example.com/docs/warranty_singer_4452_01.pdf",
                            Notes = "Bảo hành máy mới, sửa chữa bo mạch nguồn bị lỗi",
                            Provider = "Singer Vietnam",
                            SparePartCode = "SP029",
                            SparePartName = "Bộ Điều Khiển Điện Tử",
                            Status = "Completed",
                            WarrantyCode = "WAR-SINGER-001",
                            WarrantyEndDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyReason = "Máy mới",
                            WarrantyStartDate = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            WarrantyType = "Manufacturer"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("DeviceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarrantyHistories", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageMappingsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("EstimatedRepairTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ErrorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Errors_ErrorCode")
                        .HasFilter("[ErrorCode] IS NOT NULL");

                    b.ToTable("Errors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2639),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2639),
                            Description = "Bàn đạp không phản hồi hoặc mất tín hiệu.",
                            ErrorCode = "HONG_BAN_DAP",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Hỏng Bàn Đạp",
                            OccurrenceCount = 20,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2644),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2644),
                            Description = "Dây curoa lỏng hoặc mòn, gây mất chuyển động.",
                            ErrorCode = "DAYCUROA_TRUOT",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Dây Curoa Trượt",
                            OccurrenceCount = 15,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a333-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2649),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2649),
                            Description = "Bo điều khiển bị lỗi, không kiểm soát được tốc độ.",
                            ErrorCode = "MAY_CHAY_LUON_LUOT",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Máy Chạy Luôn Lượt",
                            OccurrenceCount = 5,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2651),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2652),
                            Description = "Động cơ chính bị cháy do quá tải hoặc ngắn mạch.",
                            ErrorCode = "CHAY_MOTOR",
                            EstimatedRepairTime = new TimeSpan(0, 3, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cháy Motor",
                            OccurrenceCount = 3,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2657),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2658),
                            Description = "Cơ chế giữ kim bị lệch hoặc gãy.",
                            ErrorCode = "KHOA_KIM_HONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 40, 0, 0),
                            IsCommon = true,
                            Name = "Khóa Kim Hỏng",
                            OccurrenceCount = 18,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a666-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2660),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2660),
                            Description = "Dầu rò ra ngoài do gioăng hoặc phớt bị mòn.",
                            ErrorCode = "GIOANG_DAU_BI_RO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Gioăng Dầu Bị Rò",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a777-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2663),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2663),
                            Description = "Cảm biến vị trí bị lệch dẫn đến dừng máy không đúng lúc.",
                            ErrorCode = "CAM_BIEN_LECH",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Lệch",
                            OccurrenceCount = 6,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2666),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2666),
                            Description = "Bo mạch điều khiển bị chập, không phản hồi.",
                            ErrorCode = "LOI_MACH_DIEU_KHIEN",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Lỗi Mạch Điều Khiển",
                            OccurrenceCount = 4,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a999-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2669),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2669),
                            Description = "Cơ chế chống trôi vải không ăn khớp.",
                            ErrorCode = "CHONG_TROI_KHONG_HOAT_DONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 50, 0, 0),
                            IsCommon = true,
                            Name = "Chống Trôi Không Hoạt Động",
                            OccurrenceCount = 12,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1abbb-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2671),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2672),
                            Description = "Chốt vải bị kẹt, gây gián đoạn chu trình may.",
                            ErrorCode = "CHOT_VAI_KET",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Chốt Vải Kẹt",
                            OccurrenceCount = 22,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1addd-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2675),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2676),
                            Description = "Vòng bạc trục bị mòn dẫn đến rung lắc hoặc tiếng ồn lớn.",
                            ErrorCode = "VONG_BAC_MON",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Vòng Bạc Mòn",
                            OccurrenceCount = 14,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1aeee-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2684),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2684),
                            Description = "Dao cắt không bén, gây xơ vải hoặc rách mép.",
                            ErrorCode = "DAO_CAT_KHONG_SAC",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Dao Cắt Không Sắc",
                            OccurrenceCount = 25,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2688),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2689),
                            Description = "Cảm biến không phát hiện được vải khi đưa vào.",
                            ErrorCode = "CAM_BIEN_VAI_KHONG_NHAN",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Vải Không Nhận",
                            OccurrenceCount = 6,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2692),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2692),
                            Description = "Kim không đúng trục tâm, đâm lệch lỗ.",
                            ErrorCode = "KIM_LOI_TAM",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Kim Lỗi Tâm",
                            OccurrenceCount = 18,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a123-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2695),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2695),
                            Description = "Quạt tản nhiệt không hoạt động gây quá nhiệt.",
                            ErrorCode = "LOI_QUAT_GIO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Lỗi Quạt Gió",
                            OccurrenceCount = 7,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2698),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2698),
                            Description = "Trục chính không quay đồng tâm gây rung.",
                            ErrorCode = "TRUC_CHINH_LAC",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Trục Chính Lệch",
                            OccurrenceCount = 4,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a125-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2701),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2703),
                            Description = "Đèn máy không sáng do đuôi đèn bị hỏng.",
                            ErrorCode = "DUI_DEN_CHAY",
                            EstimatedRepairTime = new TimeSpan(0, 0, 20, 0, 0),
                            IsCommon = true,
                            Name = "Đuôi Đèn Cháy",
                            OccurrenceCount = 15,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2705),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2705),
                            Description = "Bộ điều khiển không lưu lại các thiết lập máy.",
                            ErrorCode = "MAT_BO_NHO_LUU_THONG_SO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Mất Bộ Nhớ Lưu Thông Số",
                            OccurrenceCount = 2,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2708),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2708),
                            Description = "Áp lực chân vịt không ổn định do cảm biến sai số.",
                            ErrorCode = "CAM_BIEN_AP_LUC_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Áp Lực Lỗi",
                            OccurrenceCount = 5,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2710),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2711),
                            Description = "Vải bị kéo không đều do lỗi bộ cấp vải.",
                            ErrorCode = "ROONG_KHONG_DU_SIEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Rong Không Đủ Siêu",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2714),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2715),
                            Description = "Bộ phận giữ chỉ không đủ lực siết, gây bung chỉ khi may.",
                            ErrorCode = "MO_TROI_CHI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 45, 0, 0),
                            IsCommon = true,
                            Name = "Mỏ Trói Chỉ Bị Lỏng",
                            OccurrenceCount = 13,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2717),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2717),
                            Description = "Bánh răng truyền động bị mòn, phát ra tiếng kêu hoặc trượt.",
                            ErrorCode = "BANH_RANG_MON",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Bánh Răng Mòn",
                            OccurrenceCount = 17,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2720),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2720),
                            Description = "Bộ phận điều khiển bằng tay không ăn khớp với cơ cấu truyền động.",
                            ErrorCode = "CAM_TAY_KHONG_AN_KHOP",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cần Tay Không Ăn Khớp",
                            OccurrenceCount = 3,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2723),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2723),
                            Description = "Kim va vào mặt vải hoặc phụ liệu, có thể gây hỏng bề mặt.",
                            ErrorCode = "KIM_CHAM_VAI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Kim Chạm Vải",
                            OccurrenceCount = 22,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2726),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2726),
                            Description = "Dây nối từ nút khởi động đến động cơ bị hở hoặc đứt.",
                            ErrorCode = "DAY_KHOI_DONG_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Dây Khởi Động Lỗi",
                            OccurrenceCount = 6,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2766),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2766),
                            Description = "Một số bu lông cố định các cụm máy bị lỏng gây rung lắc.",
                            ErrorCode = "BULONG_LONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 40, 0, 0),
                            IsCommon = true,
                            Name = "Bu Lông Lỏng",
                            OccurrenceCount = 19,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2769),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2769),
                            Description = "Hỏng mạch điện đèn chiếu sáng, gây mất tầm nhìn khu vực may.",
                            ErrorCode = "MACH_DEN_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Mạch Đèn Lỗi",
                            OccurrenceCount = 12,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a136-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2772),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2772),
                            Description = "Dầu bôi trơn ra quá nhiều gây loang vải hoặc trơn trượt bộ truyền.",
                            ErrorCode = "DAU_BO_NHIEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Dầu Bôi Trơn Nhiều",
                            OccurrenceCount = 11,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2776),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2776),
                            Description = "Quạt thông gió hoạt động yếu, không đủ làm mát cho mô tơ.",
                            ErrorCode = "QUAT_THONG_GIO_YEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Quạt Thông Gió Yếu",
                            OccurrenceCount = 4,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a138-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2779),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2779),
                            Description = "Cửa kim không thẳng hàng với trục kim gây lệch đường may.",
                            ErrorCode = "CUA_KIM_LECH",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Cửa Kim Lệch",
                            OccurrenceCount = 20,
                            Severity = "Medium"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestIssueId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("IssueKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("int");

                    b.HasIndex("IssueKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Issues_IssueKey")
                        .HasFilter("[IssueKey] IS NOT NULL");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2136),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2137),
                            Description = "Máy may bị nóng sau thời gian sử dụng ngắn.",
                            DisplayName = "Máy Nóng",
                            IsCommon = false,
                            IssueKey = "MAY_NONG"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2145),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2146),
                            Description = "Kim bị gãy trong quá trình may.",
                            DisplayName = "Kim Gãy",
                            IsCommon = false,
                            IssueKey = "KIM_GAY"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2148),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2148),
                            Description = "Máy không khởi động hoặc không hoạt động khi bật công tắc.",
                            DisplayName = "Máy Không Chạy",
                            IsCommon = false,
                            IssueKey = "MAY_KHONG_CHAY"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2150),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2151),
                            Description = "Máy bị chảy dầu ra ngoài, ảnh hưởng đến hoạt động.",
                            DisplayName = "Chảy Dầu",
                            IsCommon = false,
                            IssueKey = "CHAY_DAU"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2152),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2153),
                            Description = "Máy phát ra tiếng ồn lớn bất thường khi hoạt động.",
                            DisplayName = "Kêu To",
                            IsCommon = false,
                            IssueKey = "KEU_TO"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2155),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2155),
                            Description = "Máy làm rách vải trong quá trình may.",
                            DisplayName = "Rách Vải",
                            IsCommon = false,
                            IssueKey = "RACH_VAI"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2161),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2161),
                            Description = "Kim không xuyên đúng vị trí gây lỗi đường may.",
                            DisplayName = "Lưỡi Kim",
                            IsCommon = false,
                            IssueKey = "LUOI_KIM"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2163),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2163),
                            Description = "Chỉ bị đứt liên tục trong quá trình sử dụng.",
                            DisplayName = "Đứt Chỉ",
                            IsCommon = false,
                            IssueKey = "DUT_CHI"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2167),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2167),
                            Description = "Máy không cuốn chỉ hoặc chỉ bị rối.",
                            DisplayName = "Không Cuốn Chỉ",
                            IsCommon = false,
                            IssueKey = "KHONG_CUON_CHI"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2170),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2170),
                            Description = "Máy chạy chậm hoặc không đều tốc độ.",
                            DisplayName = "Máy Chạy Chậm",
                            IsCommon = false,
                            IssueKey = "MAY_CHAY_CHAM"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2172),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2172),
                            Description = "Đường chỉ may không đều, lúc chặt lúc lỏng.",
                            DisplayName = "Chỉ Không Đều",
                            IsCommon = false,
                            IssueKey = "CHI_KHONG_DEU"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2174),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2175),
                            Description = "Đèn báo lỗi trên máy may sáng liên tục.",
                            DisplayName = "Đèn Báo Lỗi",
                            IsCommon = false,
                            IssueKey = "DEN_BAO_LOI"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2177),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2177),
                            Description = "Bàn đạp không phản hồi khi sử dụng.",
                            DisplayName = "Bàn Đạp Không Hoạt Động",
                            IsCommon = false,
                            IssueKey = "BAN_DAP_KHONG_HOAT_DONG"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2179),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2179),
                            Description = "Vải bị nhăn hoặc co kéo trong quá trình may.",
                            DisplayName = "Vải Bị Nhăn",
                            IsCommon = false,
                            IssueKey = "VAI_BI_NHAN"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2181),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2181),
                            Description = "Kim may không di chuyển khi máy hoạt động.",
                            DisplayName = "Kim Không Di Chuyển",
                            IsCommon = false,
                            IssueKey = "KIM_KHONG_DI_CHUYEN"
                        },
                        new
                        {
                            Id = new Guid("12121212-1212-1212-1212-121212121212"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2183),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2184),
                            Description = "Ống chỉ bị kẹt hoặc không quay đúng cách.",
                            DisplayName = "Ống Chỉ Lỗi",
                            IsCommon = false,
                            IssueKey = "ONG_CHI_LOI"
                        },
                        new
                        {
                            Id = new Guid("23232323-2323-2323-2323-232323232323"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2187),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2187),
                            Description = "Dây curoa bị lỏng hoặc đứt, gây ngừng máy.",
                            DisplayName = "Dây Curoa Lỗi",
                            IsCommon = false,
                            IssueKey = "DAY_CUROA_LOI"
                        },
                        new
                        {
                            Id = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2189),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2189),
                            Description = "Chỉ dưới không được kéo lên đúng cách.",
                            DisplayName = "Chỉ Dưới Lỗi",
                            IsCommon = false,
                            IssueKey = "CHI_DUOI_LOI"
                        },
                        new
                        {
                            Id = new Guid("45454545-4545-4545-4545-454545454545"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2191),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2191),
                            Description = "Máy tự động dừng trong khi đang hoạt động.",
                            DisplayName = "Máy Tự Dừng",
                            IsCommon = false,
                            IssueKey = "MAY_TU_DUNG"
                        },
                        new
                        {
                            Id = new Guid("56565656-5656-5656-5656-565656565656"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2193),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(2194),
                            Description = "Nút điều chỉnh độ căng chỉ không hoạt động.",
                            DisplayName = "Nút Điều Chỉnh Lỗi",
                            IsCommon = false,
                            IssueKey = "NUT_DIEU_CHINH_LOI"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MachineCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Machines_MachineCode")
                        .HasFilter("[MachineCode] IS NOT NULL");

                    b.ToTable("Machines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8322),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8322),
                            Description = "High-speed single needle lockstitch sewing machine, unit 1, for lightweight fabrics.",
                            MachineCode = "MC001-JUKI-DDL8700-01",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_01.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8328),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8328),
                            Description = "High-speed single needle lockstitch sewing machine, unit 2, for medium-weight fabrics.",
                            MachineCode = "MC002-JUKI-DDL8700-02",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_02.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8332),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8332),
                            Description = "High-speed single needle lockstitch sewing machine, unit 3, in maintenance.",
                            MachineCode = "MC003-JUKI-DDL8700-03",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_03.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-003",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8336),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8336),
                            Description = "High-speed single needle lockstitch sewing machine, unit 4, for cotton fabrics.",
                            MachineCode = "MC004-JUKI-DDL8700-04",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_04.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-004",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8340),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8340),
                            Description = "High-speed single needle lockstitch sewing machine, unit 5, for synthetic fabrics.",
                            MachineCode = "MC005-JUKI-DDL8700-05",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_05.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-005",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8346),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8346),
                            Description = "High-speed single needle lockstitch sewing machine, unit 6, retired unit.",
                            MachineCode = "MC006-JUKI-DDL8700-06",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_06.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-006",
                            Status = "Retired"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8350),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8351),
                            Description = "High-speed single needle lockstitch sewing machine, unit 7, for heavy fabrics.",
                            MachineCode = "MC007-JUKI-DDL8700-07",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_07.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-007",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8355),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8355),
                            Description = "High-speed single needle lockstitch sewing machine, unit 8, for thin fabrics.",
                            MachineCode = "MC008-JUKI-DDL8700-08",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_08.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-008",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8362),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8363),
                            Description = "High-speed single needle lockstitch sewing machine, unit 9, for mixed fabrics.",
                            MachineCode = "MC009-JUKI-DDL8700-09",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_09.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-009",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8366),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8367),
                            Description = "High-speed single needle lockstitch sewing machine, unit 10, for general use.",
                            MachineCode = "MC010-JUKI-DDL8700-10",
                            MachineName = "Industrial Sewing Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-8700",
                            PhotoUrl = "https://example.com/photos/juki_ddl8700_10.jpg",
                            ReleaseDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5500 SPM, Max stitch length: 5mm, Serial: J8700-010",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8372),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8373),
                            Description = "Digital lockstitch machine with auto thread trimmer, unit 1.",
                            MachineCode = "MC011-JUKI-DDL9000C-01",
                            MachineName = "Digital Lockstitch Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_01.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer, Serial: J9000C-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8381),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8381),
                            Description = "Digital lockstitch machine with auto thread trimmer, unit 2.",
                            MachineCode = "MC012-JUKI-DDL9000C-02",
                            MachineName = "Digital Lockstitch Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_02.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer, Serial: J9000C-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8385),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8385),
                            Description = "Digital lockstitch machine with auto thread trimmer, unit 3.",
                            MachineCode = "MC013-JUKI-DDL9000C-03",
                            MachineName = "Digital Lockstitch Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_03.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer, Serial: J9000C-003",
                            Status = "InRepair"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8389),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8389),
                            Description = "Digital lockstitch machine with auto thread trimmer, unit 4.",
                            MachineCode = "MC014-JUKI-DDL9000C-04",
                            MachineName = "Digital Lockstitch Machine",
                            Manufacturer = "Juki",
                            Model = "DDL-9000C",
                            PhotoUrl = "https://example.com/photos/juki_ddl9000c_04.jpg",
                            ReleaseDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 5000 SPM, Auto thread trimmer, Serial: J9000C-004",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8392),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8392),
                            Description = "Three-thread overlock sewing machine, unit 1, for lightweight fabrics.",
                            MachineCode = "MC015-BROTHER-B957-01",
                            MachineName = "Overlock Machine",
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/brother_b957_01.jpg",
                            ReleaseDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 7000 SPM, Differential feed ratio: 0.7-2.0, Serial: B957-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8395),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8395),
                            Description = "Three-thread overlock sewing machine, unit 2, for synthetic fabrics.",
                            MachineCode = "MC016-BROTHER-B957-02",
                            MachineName = "Overlock Machine",
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/brother_b957_02.jpg",
                            ReleaseDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 7000 SPM, Differential feed ratio: 0.7-2.0, Serial: B957-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8399),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8399),
                            Description = "Three-thread overlock sewing machine, unit 3, for thin materials.",
                            MachineCode = "MC017-BROTHER-B957-03",
                            MachineName = "Overlock Machine",
                            Manufacturer = "Brother",
                            Model = "B957",
                            PhotoUrl = "https://example.com/photos/brother_b957_03.jpg",
                            ReleaseDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 7000 SPM, Differential feed ratio: 0.7-2.0, Serial: B957-003",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8402),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8403),
                            Description = "Heavy-duty machine for thick materials, unit 1, for denim.",
                            MachineCode = "MC018-SINGER-4452-01",
                            MachineName = "Heavy Duty Sewing Machine",
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/singer_4452_01.jpg",
                            ReleaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 1100 SPM, Presser foot lift: 6mm, Serial: S4452-001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8407),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8407),
                            Description = "Heavy-duty machine for thick materials, unit 2, for leather.",
                            MachineCode = "MC019-SINGER-4452-02",
                            MachineName = "Heavy Duty Sewing Machine",
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/singer_4452_02.jpg",
                            ReleaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 1100 SPM, Presser foot lift: 6mm, Serial: S4452-002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8411),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(8411),
                            Description = "Heavy-duty machine for thick materials, unit 3, for canvas.",
                            MachineCode = "MC020-SINGER-4452-03",
                            MachineName = "Heavy Duty Sewing Machine",
                            Manufacturer = "Singer",
                            Model = "4452",
                            PhotoUrl = "https://example.com/photos/singer_4452_03.jpg",
                            ReleaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specifications = "Max speed: 1100 SPM, Presser foot lift: 6mm, Serial: S4452-003",
                            Status = "InRepair"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasFilter("[DeviceId] IS NOT NULL");

                    b.HasIndex("ZoneId");

                    b.ToTable("Positions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1e2d3c4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(670),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(671),
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(674),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(674),
                            DeviceId = new Guid("d1e2f3a4-0002-0002-0002-000000000002"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(677),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(678),
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(681),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(681),
                            DeviceId = new Guid("d1e2f3a4-0005-0005-0005-000000000005"),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(686),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(686),
                            Index = 5,
                            ZoneId = new Guid("c1d2e3f4-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(691),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(691),
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(694),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(695),
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(698),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(698),
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(701),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(701),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(704),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(705),
                            DeviceId = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(708),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(708),
                            DeviceId = new Guid("d1e2f3a4-0010-0010-0010-000000000010"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(778),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(779),
                            DeviceId = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(784),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(784),
                            DeviceId = new Guid("d1e2f3a4-0014-0014-0014-000000000014"),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(787),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(787),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0004-0004-0004-000000000004")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(790),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(790),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0004-0004-0004-000000000004")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(793),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(793),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(796),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(796),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(799),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(799),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(802),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(802),
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(805),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(805),
                            DeviceId = new Guid("d1e2f3a4-0016-0016-0016-000000000016"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(811),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(811),
                            DeviceId = new Guid("d1e2f3a4-0017-0017-0017-000000000017"),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(814),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(814),
                            Index = 4,
                            ZoneId = new Guid("c1d2e3f4-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(817),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(817),
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0007-0007-0007-000000000007")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(822),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(822),
                            DeviceId = new Guid("d1e2f3a4-0019-0019-0019-000000000019"),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0007-0007-0007-000000000007")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(825),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(825),
                            Index = 3,
                            ZoneId = new Guid("c1d2e3f4-0007-0007-0007-000000000007")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(827),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(828),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0008-0008-0008-000000000008")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(830),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(830),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0008-0008-0008-000000000008")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(832),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(833),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0009-0009-0009-000000000009")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(836),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(837),
                            Index = 2,
                            ZoneId = new Guid("c1d2e3f4-0009-0009-0009-000000000009")
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(839),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 430, DateTimeKind.Utc).AddTicks(839),
                            Index = 1,
                            ZoneId = new Guid("c1d2e3f4-0010-0010-0010-000000000010")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SerderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SerderId");

                    b.ToTable("Requests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1e2f3a4-0001-0001-1001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9688),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9688),
                            Description = "Máy ngừng hoạt động do đứt chỉ tại Dây chuyền May A, Vị trí 1, làm gián đoạn sản xuất vải mỏng.",
                            DeviceId = new Guid("d1e2f3a4-0001-0001-0001-000000000001"),
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "Máy bị đứt chỉ Juki DDL-8700 Đơn vị 1",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0002-0002-1002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9695),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 16, 45, 22, 429, DateTimeKind.Utc).AddTicks(9695),
                            Description = "Động cơ ngừng hoạt động tại Dây chuyền May A, Vị trí 3. Quan trọng cho sản xuất vải cotton.",
                            DeviceId = new Guid("d1e2f3a4-0004-0004-0004-000000000004"),
                            DueDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "Hỏng động cơ Juki DDL-8700 Đơn vị 4",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0003-0003-1003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9708),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 15, 45, 22, 429, DateTimeKind.Utc).AddTicks(9708),
                            Description = "Kim bị kẹt tại Dây chuyền May B, Vị trí 1. Ảnh hưởng đến sản xuất vải dày.",
                            DeviceId = new Guid("d1e2f3a4-0007-0007-0007-000000000007"),
                            DueDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            RequestTitle = "Kẹt kim Juki DDL-8700 Đơn vị 7",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0004-0004-1004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9712),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9713),
                            Description = "Máy cắt chỉ tự động bị lệch tại Dây chuyền May B, Vị trí 3. Gây ra mũi may không đều.",
                            DeviceId = new Guid("d1e2f3a4-0011-0011-0011-000000000011"),
                            DueDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            RequestTitle = "Sự cố hiệu chỉnh Juki DDL-9000C Đơn vị 1",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0005-0005-1005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9716),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 16, 45, 22, 429, DateTimeKind.Utc).AddTicks(9717),
                            Description = "Bộ phận cấp liệu khác biệt bị trục trặc tại Khu vực Vắt Sổ, Vị trí 1. Ảnh hưởng đến hoàn thiện vải mỏng.",
                            DeviceId = new Guid("d1e2f3a4-0015-0015-0015-000000000015"),
                            DueDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "Sự cố máy vắt sổ Brother B957 Đơn vị 1",
                            RequestedById = new Guid("32222222-2222-2222-2222-222222222222"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0006-0006-1006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9723),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 15, 45, 22, 429, DateTimeKind.Utc).AddTicks(9723),
                            Description = "Nguồn điện bị gián đoạn tại Khu vực May Nặng, Vị trí 1. Ảnh hưởng đến sản xuất vải denim.",
                            DeviceId = new Guid("d1e2f3a4-0018-0018-0018-000000000018"),
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "Sự cố nguồn điện Singer 4452 Đơn vị 1",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0007-0007-1007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9727),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9728),
                            Description = "Cần bảo trì định kỳ cho Juki DDL-8700 tại Dây chuyền May C, Vị trí 1 để ngăn ngừa sự cố.",
                            DeviceId = new Guid("d1e2f3a4-0009-0009-0009-000000000009"),
                            DueDate = new DateTime(2025, 5, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            RequestTitle = "Kiểm tra bảo trì Juki DDL-8700 Đơn vị 9",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0008-0008-1008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9732),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 17, 45, 22, 429, DateTimeKind.Utc).AddTicks(9732),
                            Description = "Căng chỉ không đúng tại Dây chuyền May C, Vị trí 3. Ảnh hưởng đến chất lượng mũi may.",
                            DeviceId = new Guid("d1e2f3a4-0012-0012-0012-000000000012"),
                            DueDate = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            RequestTitle = "Sự cố căng chỉ Juki DDL-9000C Đơn vị 2",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0009-0009-1009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9738),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 15, 45, 22, 429, DateTimeKind.Utc).AddTicks(9738),
                            Description = "Máy đang sửa chữa cần thay động cơ. Hiện không được gán vị trí.",
                            DeviceId = new Guid("d1e2f3a4-0003-0003-0003-000000000003"),
                            DueDate = new DateTime(2025, 5, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            RequestTitle = "Yêu cầu sửa chữa Juki DDL-8700 Đơn vị 3",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0010-0010-1010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9741),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9742),
                            Description = "Dây đai truyền động bị trượt tại Khu vực May Nặng, Vị trí 2. Ảnh hưởng đến sản xuất da.",
                            DeviceId = new Guid("d1e2f3a4-0019-0019-0019-000000000019"),
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "High",
                            RequestTitle = "Sự cố dây đai Singer 4452 Đơn vị 2",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333343"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0011-0011-1011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9746),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 16, 45, 22, 429, DateTimeKind.Utc).AddTicks(9746),
                            Description = "Máy vắt sổ tại Khu vực Vắt Sổ, Vị trí 2 cần bôi trơn để ngăn mòn.",
                            DeviceId = new Guid("d1e2f3a4-0016-0016-0016-000000000016"),
                            DueDate = new DateTime(2025, 5, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            RequestTitle = "Cần bôi trơn Brother B957 Đơn vị 2",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0012-0012-1012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9750),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9750),
                            Description = "Hệ thống điều khiển số cần cập nhật phần mềm tại Dây chuyền May C, Vị trí 4 để tối ưu hiệu suất.",
                            DeviceId = new Guid("d1e2f3a4-0014-0014-0014-000000000014"),
                            DueDate = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            RequestTitle = "Cập nhật phần mềm Juki DDL-9000C Đơn vị 4",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0013-0013-1013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9754),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 16, 45, 22, 429, DateTimeKind.Utc).AddTicks(9754),
                            Description = "Máy đang sửa chữa cần thay cơ chế chân vịt. Hiện không được gán vị trí.",
                            DeviceId = new Guid("d1e2f3a4-0020-0020-0020-000000000020"),
                            DueDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Medium",
                            RequestTitle = "Yêu cầu sửa chữa Singer 4452 Đơn vị 3",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0014-0014-1014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9757),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 17, 45, 22, 429, DateTimeKind.Utc).AddTicks(9758),
                            Description = "Tiếng ồn lạ từ máy tại Dây chuyền May B, Vị trí 2. Có thể do vấn đề ổ bi.",
                            DeviceId = new Guid("d1e2f3a4-0008-0008-0008-000000000008"),
                            Priority = "Medium",
                            RequestTitle = "Tiếng ồn bất thường Juki DDL-8700 Đơn vị 8",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Denied"
                        },
                        new
                        {
                            Id = new Guid("a1f2e3d4-0015-0015-1015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9761),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 17, 45, 22, 429, DateTimeKind.Utc).AddTicks(9761),
                            Description = "Máy vắt sổ tại Khu vực Vắt Sổ, Vị trí 3 cần vệ sinh để loại bỏ bụi vải tích tụ.",
                            DeviceId = new Guid("d1e2f3a4-0017-0017-0017-000000000017"),
                            DueDate = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Priority = "Low",
                            RequestTitle = "Yêu cầu vệ sinh Brother B957 Đơn vị 3",
                            RequestedById = new Guid("23333333-3333-3333-3333-333333333344"),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("SparepartCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SparepartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("SparepartCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Spareparts_SparepartCode")
                        .HasFilter("[SparepartCode] IS NOT NULL");

                    b.ToTable("Spareparts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3410),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3410),
                            Description = "Kim thép không gỉ dùng cho máy may công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP001",
                            SparepartName = "Kim May Công Nghiệp",
                            Specification = "Loại DBX1, cỡ 90/14",
                            StockQuantity = 150,
                            Unit = "Cái",
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3419),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3419),
                            Description = "Dây truyền động cho máy may",
                            IsAvailable = false,
                            SparepartCode = "SP002",
                            SparepartName = "Dây Curoa",
                            Specification = "Chiều dài 1m, bản 10mm",
                            StockQuantity = 60,
                            Unit = "Cái",
                            UnitPrice = 12000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3423),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3423),
                            Description = "Bàn đạp điều khiển tốc độ",
                            IsAvailable = false,
                            SparepartCode = "SP003",
                            SparepartName = "Bàn Đạp Máy",
                            Specification = "Điện áp 220V",
                            StockQuantity = 20,
                            Unit = "Cái",
                            UnitPrice = 45000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3426),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3426),
                            Description = "Ống chỉ nhựa cho máy may tự động",
                            IsAvailable = false,
                            SparepartCode = "SP004",
                            SparepartName = "Ống Chỉ",
                            Specification = "Đường kính 2.5cm",
                            StockQuantity = 500,
                            Unit = "Cái",
                            UnitPrice = 1500m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3429),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3429),
                            Description = "Điều chỉnh nhiệt độ máy may",
                            IsAvailable = false,
                            SparepartCode = "SP005",
                            SparepartName = "Bộ Điều Khiển Nhiệt",
                            Specification = "Tối đa 200°C",
                            StockQuantity = 10,
                            Unit = "Bộ",
                            UnitPrice = 120000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3436),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3437),
                            Description = "Công tắc bật/tắt máy may",
                            IsAvailable = false,
                            SparepartCode = "SP006",
                            SparepartName = "Công Tắc Máy May",
                            Specification = "Công suất 250V - 10A",
                            StockQuantity = 35,
                            Unit = "Cái",
                            UnitPrice = 8000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3442),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3442),
                            Description = "Mô tơ điện cho máy may công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP007",
                            SparepartName = "Mô Tơ Máy May",
                            Specification = "Công suất 370W, điện 220V",
                            StockQuantity = 8,
                            Unit = "Cái",
                            UnitPrice = 350000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3445),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3445),
                            Description = "Đèn chiếu sáng cho khu vực may",
                            IsAvailable = false,
                            SparepartCode = "SP008",
                            SparepartName = "Đèn LED Gắn Máy",
                            Specification = "LED 12V, 5W, dán keo",
                            StockQuantity = 120,
                            Unit = "Cái",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3448),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3448),
                            Description = "Trụ gắn kim thay thế cho đầu máy",
                            IsAvailable = false,
                            SparepartCode = "SP009",
                            SparepartName = "Trụ Gắn Kim",
                            Specification = "Thép hợp kim bền cao",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 22000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3451),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3451),
                            Description = "Cơ cấu truyền động kim máy may",
                            IsAvailable = false,
                            SparepartCode = "SP010",
                            SparepartName = "Bộ Truyền Kim",
                            Specification = "Cơ khí chính xác cao",
                            StockQuantity = 12,
                            Unit = "Bộ",
                            UnitPrice = 85000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3454),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3454),
                            Description = "Bộ phận giữ chỉ dưới trong máy may",
                            IsAvailable = false,
                            SparepartCode = "SP011",
                            SparepartName = "Ổ Chỉ Dưới",
                            Specification = "Kim loại bền, chuẩn công nghiệp",
                            StockQuantity = 100,
                            Unit = "Cái",
                            UnitPrice = 10000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3457),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3457),
                            Description = "Bánh răng dẫn động kim và trụ máy",
                            IsAvailable = false,
                            SparepartCode = "SP012",
                            SparepartName = "Bánh Răng Truyền Động",
                            Specification = "Hợp kim, răng xoắn",
                            StockQuantity = 60,
                            Unit = "Cái",
                            UnitPrice = 30000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3459),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3460),
                            Description = "Trục truyền động từ mô tơ đến kim",
                            IsAvailable = false,
                            SparepartCode = "SP013",
                            SparepartName = "Trục Kim Máy May",
                            Specification = "Thép tôi cứng, chống mài mòn",
                            StockQuantity = 25,
                            Unit = "Cái",
                            UnitPrice = 40000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3464),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3464),
                            Description = "Khung giữ ống chỉ phía trên máy",
                            IsAvailable = false,
                            SparepartCode = "SP014",
                            SparepartName = "Giá Đỡ Ống Chỉ",
                            Specification = "Nhựa chịu lực hoặc kim loại",
                            StockQuantity = 80,
                            Unit = "Cái",
                            UnitPrice = 7000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3468),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3468),
                            Description = "Phụ kiện cảm biến tốc độ quay mô tơ",
                            IsAvailable = false,
                            SparepartCode = "SP015",
                            SparepartName = "Cảm Biến Tốc Độ",
                            Specification = "Điện áp 5V TTL, chuẩn hall sensor",
                            StockQuantity = 15,
                            Unit = "Cái",
                            UnitPrice = 65000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3471),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3471),
                            Description = "Bộ khung bên ngoài cho máy loại nhỏ",
                            IsAvailable = false,
                            SparepartCode = "SP016",
                            SparepartName = "Khung Máy Nhỏ",
                            Specification = "Nhôm đúc",
                            StockQuantity = 12,
                            Unit = "Bộ",
                            UnitPrice = 90000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3474),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3474),
                            Description = "Lót chân máy may giảm rung, chống ồn",
                            IsAvailable = false,
                            SparepartCode = "SP017",
                            SparepartName = "Đế Cao Su Chống Rung",
                            Specification = "Cao su tổng hợp, đường kính 5cm",
                            StockQuantity = 150,
                            Unit = "Cái",
                            UnitPrice = 3000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3480),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3480),
                            Description = "Bánh dẫn puli gắn với động cơ",
                            IsAvailable = false,
                            SparepartCode = "SP018",
                            SparepartName = "Puli Dây Curoa",
                            Specification = "Đường kính 80mm, thép hợp kim",
                            StockQuantity = 30,
                            Unit = "Cái",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3483),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3483),
                            Description = "Dây cấp nguồn cho mô tơ máy may",
                            IsAvailable = false,
                            SparepartCode = "SP019",
                            SparepartName = "Dây Điện Động Cơ",
                            Specification = "2 lõi, dài 1.5m, bọc cách điện",
                            StockQuantity = 100,
                            Unit = "Cuộn",
                            UnitPrice = 10000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3485),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3486),
                            Description = "Chắn dầu chống tràn ra khỏi ổ",
                            IsAvailable = false,
                            SparepartCode = "SP020",
                            SparepartName = "Bộ Gương Chắn Dầu",
                            Specification = "Nhựa chịu nhiệt, lắp trong trục máy",
                            StockQuantity = 50,
                            Unit = "Bộ",
                            UnitPrice = 22000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3489),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3489),
                            Description = "Kim chuyên dụng cho vải dày, da, nỉ",
                            IsAvailable = false,
                            SparepartCode = "SP021",
                            SparepartName = "Kim May Dày",
                            Specification = "Cỡ 100/16, loại DPX17",
                            StockQuantity = 80,
                            Unit = "Cái",
                            UnitPrice = 6000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3492),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3492),
                            Description = "Loại dây curoa dự phòng cho máy lập trình",
                            IsAvailable = false,
                            SparepartCode = "SP022",
                            SparepartName = "Dây Curoa Dự Phòng",
                            Specification = "Bản rộng 8mm, răng hình thang",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 15000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3497),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3497),
                            Description = "Loại đèn LED gắn bên cạnh trục kim",
                            IsAvailable = false,
                            SparepartCode = "SP023",
                            SparepartName = "Đèn Chiếu Sáng Máy May",
                            Specification = "LED trắng 6W, 220V",
                            StockQuantity = 100,
                            Unit = "Cái",
                            UnitPrice = 20000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3500),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3500),
                            Description = "Cơ cấu điều khiển chân vịt tự động",
                            IsAvailable = false,
                            SparepartCode = "SP024",
                            SparepartName = "Bộ Điều Khiển Chân Vịt",
                            Specification = "Tích hợp cảm biến áp suất",
                            StockQuantity = 18,
                            Unit = "Bộ",
                            UnitPrice = 95000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3503),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3503),
                            Description = "Ổ chỉ dưới thay thế cho máy Brother",
                            IsAvailable = false,
                            SparepartCode = "SP025",
                            SparepartName = "Ổ Chỉ Dưới (Loại A)",
                            Specification = "Chuẩn A, có lò xo giữ",
                            StockQuantity = 75,
                            Unit = "Cái",
                            UnitPrice = 11000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3506),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3506),
                            Description = "Thanh truyền động từ bàn đạp đến mô tơ",
                            IsAvailable = false,
                            SparepartCode = "SP026",
                            SparepartName = "Trục Quay Bàn Đạp",
                            Specification = "Thép đặc, dài 30cm",
                            StockQuantity = 25,
                            Unit = "Cái",
                            UnitPrice = 27000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3508),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3509),
                            Description = "Đế cao su chống trượt cho máy may",
                            IsAvailable = false,
                            SparepartCode = "SP027",
                            SparepartName = "Đế Máy May",
                            Specification = "4 miếng/bộ, cao su EPDM",
                            StockQuantity = 90,
                            Unit = "Bộ",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3511),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3512),
                            Description = "Giá đỡ đèn LED trên thân máy",
                            IsAvailable = false,
                            SparepartCode = "SP028",
                            SparepartName = "Khung Gắn Đèn",
                            Specification = "Inox không gỉ",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 9000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3514),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3514),
                            Description = "Bo mạch điều khiển trung tâm cho máy điện tử",
                            IsAvailable = false,
                            SparepartCode = "SP029",
                            SparepartName = "Bộ Điều Khiển Điện Tử",
                            Specification = "Mainboard 8-bit MCU",
                            StockQuantity = 5,
                            Unit = "Bộ",
                            UnitPrice = 350000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3518),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(3519),
                            Description = "Khung gắn chỉ đứng dùng cho máy công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP030",
                            SparepartName = "Giá Đỡ Chỉ Đứng",
                            Specification = "2 trục, cao 60cm",
                            StockQuantity = 55,
                            Unit = "Cái",
                            UnitPrice = 13000m
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeviceReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReportNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AssigneeId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("StaffID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1015),
                            IsDeleted = false,
                            Email = "hod@gmail.com",
                            FullName = "Head of Department",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 1,
                            UserName = "Head of Department"
                        },
                        new
                        {
                            Id = new Guid("32222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1044),
                            IsDeleted = false,
                            Email = "hot@gmail.com",
                            FullName = "Head of Team",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Team"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1047),
                            IsDeleted = false,
                            Email = "staff@gmail.com",
                            FullName = "Staff Member",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member"
                        },
                        new
                        {
                            Id = new Guid("54444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1052),
                            IsDeleted = false,
                            Email = "sk@gmail.com",
                            FullName = "Support Staff",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 4,
                            UserName = "Support Staff"
                        },
                        new
                        {
                            Id = new Guid("65555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1054),
                            IsDeleted = false,
                            Email = "admin@gmail.com",
                            FullName = "Administrator",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 5,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333334"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1056),
                            IsDeleted = false,
                            Email = "staff2@gmail.com",
                            FullName = "Staff Member 2",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 2"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333335"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1060),
                            IsDeleted = false,
                            Email = "staff3@gmail.com",
                            FullName = "Staff Member 3",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 3"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333336"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1062),
                            IsDeleted = false,
                            Email = "staff4@gmail.com",
                            FullName = "Staff Member 4",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 4"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333337"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1066),
                            IsDeleted = false,
                            Email = "staff5@gmail.com",
                            FullName = "Staff Member 5",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 5"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333338"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1067),
                            IsDeleted = false,
                            Email = "staff6@gmail.com",
                            FullName = "Staff Member 6",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 6"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333339"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1069),
                            IsDeleted = false,
                            Email = "staff7@gmail.com",
                            FullName = "Staff Member 7",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 7"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333340"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1071),
                            IsDeleted = false,
                            Email = "staff8@gmail.com",
                            FullName = "Staff Member 8",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 8"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333341"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1121),
                            IsDeleted = false,
                            Email = "staff9@gmail.com",
                            FullName = "Staff Member 9",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 9"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333342"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1123),
                            IsDeleted = false,
                            Email = "staff10@gmail.com",
                            FullName = "Staff Member 10",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member 10"
                        },
                        new
                        {
                            Id = new Guid("23333333-3333-3333-3333-333333333343"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1125),
                            IsDeleted = false,
                            Email = "tech2@gmail.com",
                            FullName = "Head of Tech 2",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Tech 3"
                        },
                        new
                        {
                            Id = new Guid("23333333-3333-3333-3333-333333333344"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(1126),
                            IsDeleted = false,
                            Email = "tech3@gmail.com",
                            FullName = "Head of Tech 3",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Tech 3"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AreaId");

                    b.ToTable("Zones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1d2e3f4-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9904),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9904),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneName = "Sewing Line A"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9908),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9909),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneName = "Sewing Line B"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9911),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9911),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneName = "Sewing Line C"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9914),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9914),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneName = "Cutting Section"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9917),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9917),
                            AreaId = new Guid("b1c2d3e4-0001-0001-0001-000000000001"),
                            ZoneName = "Fabric Preparation Zone"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9919),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9920),
                            AreaId = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            ZoneName = "Overlock Section"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9922),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9923),
                            AreaId = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            ZoneName = "Heavy Duty Stitching Zone"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9925),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9925),
                            AreaId = new Guid("b1c2d3e4-0002-0002-0002-000000000002"),
                            ZoneName = "Trimming and Packing Zone"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9927),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9928),
                            AreaId = new Guid("b1c2d3e4-0003-0003-0003-000000000003"),
                            ZoneName = "Inspection Zone 1"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9931),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 21, 14, 45, 22, 429, DateTimeKind.Utc).AddTicks(9932),
                            AreaId = new Guid("b1c2d3e4-0003-0003-0003-000000000003"),
                            ZoneName = "Inspection Zone 2"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Report", "Report")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Error");

                    b.Navigation("Report");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("SparepartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("IssueErrors")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("IssueErrors")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("SpareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sparepart");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("RequestIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithMany("RequestIssues")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Device", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany("Devices")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Warranties")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarranty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarrantyHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.EmailTemplate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Error", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "User")
                        .WithOne("Feedback")
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.RequestIssue", "RequestIssue")
                        .WithMany("Images")
                        .HasForeignKey("RequestIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestIssue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Issue", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Machine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Notification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithOne("Position")
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Zone", "Zone")
                        .WithMany("Positions")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Device");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithOne("Report")
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Requests")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Request", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "Sender")
                        .WithMany("Requests")
                        .HasForeignKey("SerderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Device");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Sparepart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.User", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Tasks", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Area", "Area")
                        .WithMany("Zones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Zone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Position");

                    b.Navigation("Requests");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("ErrorSpareparts");

                    b.Navigation("IssueErrors");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.Navigation("IssueErrors");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.Navigation("ErrorDetails");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.Navigation("ErrorSpareparts");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
