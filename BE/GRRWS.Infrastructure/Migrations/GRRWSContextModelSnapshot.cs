// <auto-generated />
using System;
using GRRWS.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GRRWS.Infrastructure.Migrations
{
    [DbContext(typeof(GRRWSContext))]
    partial class GRRWSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GRRWS.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.HasIndex("TaskId");

                    b.ToTable("ErrorDetails", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparepartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int");

                    b.HasKey("ErrorId", "SparepartId");

                    b.HasIndex("SparepartId");

                    b.ToTable("ErrorSpareparts");

                    b.HasData(
                        new
                        {
                            ErrorId = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000003"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000002"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000007"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000009"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a999-0009-0009-0009-000000000009"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000017"),
                            QuantityNeeded = 3
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000013"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000019"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000015"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000024"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000001"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a136-0028-0028-0028-000000000028"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000020"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000007"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000001"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000006"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000012"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000027"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000028"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000021"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000029"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000014"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000008"),
                            QuantityNeeded = 2
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000030"),
                            QuantityNeeded = 1
                        },
                        new
                        {
                            ErrorId = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            SparepartId = new Guid("10000000-0000-0000-0000-000000000026"),
                            QuantityNeeded = 1
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IssueId", "ErrorId");

                    b.HasIndex("ErrorId");

                    b.ToTable("IssueErrors", (string)null);

                    b.HasData(
                        new
                        {
                            IssueId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ErrorId = new Guid("e1d1a123-0015-0015-0015-000000000015")
                        },
                        new
                        {
                            IssueId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ErrorId = new Guid("e1d1abcf-0014-0014-0014-000000000014")
                        },
                        new
                        {
                            IssueId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ErrorId = new Guid("e1d1a444-0004-0004-0004-000000000004")
                        },
                        new
                        {
                            IssueId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ErrorId = new Guid("e1d1a666-0006-0006-0006-000000000006")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("e1d1addd-0011-0011-0011-000000000011")
                        },
                        new
                        {
                            IssueId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ErrorId = new Guid("e1d1aeee-0012-0012-0012-000000000012")
                        },
                        new
                        {
                            IssueId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ErrorId = new Guid("e1d1a132-0024-0024-0024-000000000024")
                        },
                        new
                        {
                            IssueId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013")
                        },
                        new
                        {
                            IssueId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ErrorId = new Guid("e1d1a333-0003-0003-0003-000000000003")
                        },
                        new
                        {
                            IssueId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026")
                        },
                        new
                        {
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008")
                        },
                        new
                        {
                            IssueId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ErrorId = new Guid("e1d1a111-0001-0001-0001-000000000001")
                        },
                        new
                        {
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ErrorId = new Guid("e1d1a128-0020-0020-0020-000000000020")
                        },
                        new
                        {
                            IssueId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016")
                        },
                        new
                        {
                            IssueId = new Guid("23232323-2323-2323-2323-232323232323"),
                            ErrorId = new Guid("e1d1a222-0002-0002-0002-000000000002")
                        },
                        new
                        {
                            IssueId = new Guid("23232323-2323-2323-2323-232323232323"),
                            ErrorId = new Guid("e1d1a133-0025-0025-0025-000000000025")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1a129-0021-0021-0021-000000000021")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1afff-0013-0013-0013-000000000013")
                        },
                        new
                        {
                            IssueId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ErrorId = new Guid("e1d1a126-0018-0018-0018-000000000018")
                        },
                        new
                        {
                            IssueId = new Guid("12121212-1212-1212-1212-121212121212"),
                            ErrorId = new Guid("e1d1a134-0026-0026-0026-000000000026")
                        },
                        new
                        {
                            IssueId = new Guid("12121212-1212-1212-1212-121212121212"),
                            ErrorId = new Guid("e1d1a131-0023-0023-0023-000000000023")
                        },
                        new
                        {
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            ErrorId = new Guid("e1d1a888-0008-0008-0008-000000000008")
                        },
                        new
                        {
                            IssueId = new Guid("45454545-4545-4545-4545-454545454545"),
                            ErrorId = new Guid("e1d1a137-0029-0029-0029-000000000029")
                        },
                        new
                        {
                            IssueId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027")
                        },
                        new
                        {
                            IssueId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ErrorId = new Guid("e1d1a555-0005-0005-0005-000000000005")
                        },
                        new
                        {
                            IssueId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ErrorId = new Guid("e1d1a130-0022-0022-0022-000000000022")
                        },
                        new
                        {
                            IssueId = new Guid("34343434-3434-3434-3434-343434343434"),
                            ErrorId = new Guid("e1d1a124-0016-0016-0016-000000000016")
                        },
                        new
                        {
                            IssueId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ErrorId = new Guid("e1d1a135-0027-0027-0027-000000000027")
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.Property<Guid>("SpareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpareId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("RepairSpareparts", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("RequestId", "IssueId")
                        .IsUnique();

                    b.ToTable("RequestIssues", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUnderWarranty")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasFilter("[DeviceCode] IS NOT NULL");

                    b.HasIndex("MachineId");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("ErrorId");

                    b.HasIndex("DeviceId", "ErrorId");

                    b.ToTable("DeviceErrorHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelatedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceHistories", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("IssueId");

                    b.HasIndex("DeviceId", "IssueId");

                    b.ToTable("DeviceIssueHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarranties", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("DeviceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceWarrantyHistories", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageMappingsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("EstimatedRepairTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ErrorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Errors_ErrorCode")
                        .HasFilter("[ErrorCode] IS NOT NULL");

                    b.ToTable("Errors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1d1a111-0001-0001-0001-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1098),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1099),
                            Description = "Bàn đạp không phản hồi hoặc mất tín hiệu.",
                            ErrorCode = "HONG_BAN_DAP",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Hỏng Bàn Đạp",
                            OccurrenceCount = 20,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a222-0002-0002-0002-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1106),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1107),
                            Description = "Dây curoa lỏng hoặc mòn, gây mất chuyển động.",
                            ErrorCode = "DAYCUROA_TRUOT",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Dây Curoa Trượt",
                            OccurrenceCount = 15,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a333-0003-0003-0003-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1113),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1114),
                            Description = "Bo điều khiển bị lỗi, không kiểm soát được tốc độ.",
                            ErrorCode = "MAY_CHAY_LUON_LUOT",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Máy Chạy Luôn Lượt",
                            OccurrenceCount = 5,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a444-0004-0004-0004-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1118),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1119),
                            Description = "Động cơ chính bị cháy do quá tải hoặc ngắn mạch.",
                            ErrorCode = "CHAY_MOTOR",
                            EstimatedRepairTime = new TimeSpan(0, 3, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cháy Motor",
                            OccurrenceCount = 3,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a555-0005-0005-0005-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1129),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1130),
                            Description = "Cơ chế giữ kim bị lệch hoặc gãy.",
                            ErrorCode = "KHOA_KIM_HONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 40, 0, 0),
                            IsCommon = true,
                            Name = "Khóa Kim Hỏng",
                            OccurrenceCount = 18,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a666-0006-0006-0006-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1190),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1190),
                            Description = "Dầu rò ra ngoài do gioăng hoặc phớt bị mòn.",
                            ErrorCode = "GIOANG_DAU_BI_RO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Gioăng Dầu Bị Rò",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a777-0007-0007-0007-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1197),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1197),
                            Description = "Cảm biến vị trí bị lệch dẫn đến dừng máy không đúng lúc.",
                            ErrorCode = "CAM_BIEN_LECH",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Lệch",
                            OccurrenceCount = 6,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a888-0008-0008-0008-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1208),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1208),
                            Description = "Bo mạch điều khiển bị chập, không phản hồi.",
                            ErrorCode = "LOI_MACH_DIEU_KHIEN",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Lỗi Mạch Điều Khiển",
                            OccurrenceCount = 4,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a999-0009-0009-0009-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1215),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1215),
                            Description = "Cơ chế chống trôi vải không ăn khớp.",
                            ErrorCode = "CHONG_TROI_KHONG_HOAT_DONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 50, 0, 0),
                            IsCommon = true,
                            Name = "Chống Trôi Không Hoạt Động",
                            OccurrenceCount = 12,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1abbb-0010-0010-0010-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1220),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1220),
                            Description = "Chốt vải bị kẹt, gây gián đoạn chu trình may.",
                            ErrorCode = "CHOT_VAI_KET",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Chốt Vải Kẹt",
                            OccurrenceCount = 22,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1addd-0011-0011-0011-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1225),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1226),
                            Description = "Vòng bạc trục bị mòn dẫn đến rung lắc hoặc tiếng ồn lớn.",
                            ErrorCode = "VONG_BAC_MON",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Vòng Bạc Mòn",
                            OccurrenceCount = 14,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1aeee-0012-0012-0012-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1233),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1233),
                            Description = "Dao cắt không bén, gây xơ vải hoặc rách mép.",
                            ErrorCode = "DAO_CAT_KHONG_SAC",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Dao Cắt Không Sắc",
                            OccurrenceCount = 25,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1afff-0013-0013-0013-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1238),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1239),
                            Description = "Cảm biến không phát hiện được vải khi đưa vào.",
                            ErrorCode = "CAM_BIEN_VAI_KHONG_NHAN",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Vải Không Nhận",
                            OccurrenceCount = 6,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1abcf-0014-0014-0014-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1243),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1244),
                            Description = "Kim không đúng trục tâm, đâm lệch lỗ.",
                            ErrorCode = "KIM_LOI_TAM",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Kim Lỗi Tâm",
                            OccurrenceCount = 18,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a123-0015-0015-0015-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1249),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1249),
                            Description = "Quạt tản nhiệt không hoạt động gây quá nhiệt.",
                            ErrorCode = "LOI_QUAT_GIO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Lỗi Quạt Gió",
                            OccurrenceCount = 7,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a124-0016-0016-0016-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1257),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1257),
                            Description = "Trục chính không quay đồng tâm gây rung.",
                            ErrorCode = "TRUC_CHINH_LAC",
                            EstimatedRepairTime = new TimeSpan(0, 2, 0, 0, 0),
                            IsCommon = false,
                            Name = "Trục Chính Lệch",
                            OccurrenceCount = 4,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a125-0017-0017-0017-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1262),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1263),
                            Description = "Đèn máy không sáng do đuôi đèn bị hỏng.",
                            ErrorCode = "DUI_DEN_CHAY",
                            EstimatedRepairTime = new TimeSpan(0, 0, 20, 0, 0),
                            IsCommon = true,
                            Name = "Đuôi Đèn Cháy",
                            OccurrenceCount = 15,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a126-0018-0018-0018-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1268),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1269),
                            Description = "Bộ điều khiển không lưu lại các thiết lập máy.",
                            ErrorCode = "MAT_BO_NHO_LUU_THONG_SO",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Mất Bộ Nhớ Lưu Thông Số",
                            OccurrenceCount = 2,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a127-0019-0019-0019-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1273),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1274),
                            Description = "Áp lực chân vịt không ổn định do cảm biến sai số.",
                            ErrorCode = "CAM_BIEN_AP_LUC_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cảm Biến Áp Lực Lỗi",
                            OccurrenceCount = 5,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a128-0020-0020-0020-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1279),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1279),
                            Description = "Vải bị kéo không đều do lỗi bộ cấp vải.",
                            ErrorCode = "ROONG_KHONG_DU_SIEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Rong Không Đủ Siêu",
                            OccurrenceCount = 10,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a129-0021-0021-0021-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1285),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1286),
                            Description = "Bộ phận giữ chỉ không đủ lực siết, gây bung chỉ khi may.",
                            ErrorCode = "MO_TROI_CHI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 45, 0, 0),
                            IsCommon = true,
                            Name = "Mỏ Trói Chỉ Bị Lỏng",
                            OccurrenceCount = 13,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a130-0022-0022-0022-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1292),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1292),
                            Description = "Bánh răng truyền động bị mòn, phát ra tiếng kêu hoặc trượt.",
                            ErrorCode = "BANH_RANG_MON",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = true,
                            Name = "Bánh Răng Mòn",
                            OccurrenceCount = 17,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a131-0023-0023-0023-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1297),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1298),
                            Description = "Bộ phận điều khiển bằng tay không ăn khớp với cơ cấu truyền động.",
                            ErrorCode = "CAM_TAY_KHONG_AN_KHOP",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Cần Tay Không Ăn Khớp",
                            OccurrenceCount = 3,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a132-0024-0024-0024-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1376),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1376),
                            Description = "Kim va vào mặt vải hoặc phụ liệu, có thể gây hỏng bề mặt.",
                            ErrorCode = "KIM_CHAM_VAI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Kim Chạm Vải",
                            OccurrenceCount = 22,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a133-0025-0025-0025-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1382),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1383),
                            Description = "Dây nối từ nút khởi động đến động cơ bị hở hoặc đứt.",
                            ErrorCode = "DAY_KHOI_DONG_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = false,
                            Name = "Dây Khởi Động Lỗi",
                            OccurrenceCount = 6,
                            Severity = "High"
                        },
                        new
                        {
                            Id = new Guid("e1d1a134-0026-0026-0026-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1388),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1389),
                            Description = "Một số bu lông cố định các cụm máy bị lỏng gây rung lắc.",
                            ErrorCode = "BULONG_LONG",
                            EstimatedRepairTime = new TimeSpan(0, 0, 40, 0, 0),
                            IsCommon = true,
                            Name = "Bu Lông Lỏng",
                            OccurrenceCount = 19,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a135-0027-0027-0027-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1397),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1398),
                            Description = "Hỏng mạch điện đèn chiếu sáng, gây mất tầm nhìn khu vực may.",
                            ErrorCode = "MACH_DEN_LOI",
                            EstimatedRepairTime = new TimeSpan(0, 0, 30, 0, 0),
                            IsCommon = true,
                            Name = "Mạch Đèn Lỗi",
                            OccurrenceCount = 12,
                            Severity = "Low"
                        },
                        new
                        {
                            Id = new Guid("e1d1a136-0028-0028-0028-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1402),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1403),
                            Description = "Dầu bôi trơn ra quá nhiều gây loang vải hoặc trơn trượt bộ truyền.",
                            ErrorCode = "DAU_BO_NHIEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Dầu Bôi Trơn Nhiều",
                            OccurrenceCount = 11,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a137-0029-0029-0029-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1407),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1408),
                            Description = "Quạt thông gió hoạt động yếu, không đủ làm mát cho mô tơ.",
                            ErrorCode = "QUAT_THONG_GIO_YEU",
                            EstimatedRepairTime = new TimeSpan(0, 1, 30, 0, 0),
                            IsCommon = false,
                            Name = "Quạt Thông Gió Yếu",
                            OccurrenceCount = 4,
                            Severity = "Medium"
                        },
                        new
                        {
                            Id = new Guid("e1d1a138-0030-0030-0030-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1413),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(1413),
                            Description = "Cửa kim không thẳng hàng với trục kim gây lệch đường may.",
                            ErrorCode = "CUA_KIM_LECH",
                            EstimatedRepairTime = new TimeSpan(0, 1, 0, 0, 0),
                            IsCommon = true,
                            Name = "Cửa Kim Lệch",
                            OccurrenceCount = 20,
                            Severity = "Medium"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestIssueId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("bit");

                    b.Property<string>("IssueKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("int");

                    b.HasIndex("IssueKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Issues_IssueKey")
                        .HasFilter("[IssueKey] IS NOT NULL");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(321),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(324),
                            Description = "Máy may bị nóng sau thời gian sử dụng ngắn.",
                            DisplayName = "Máy Nóng",
                            IsCommon = false,
                            IssueKey = "MAY_NONG"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(337),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(338),
                            Description = "Kim bị gãy trong quá trình may.",
                            DisplayName = "Kim Gãy",
                            IsCommon = false,
                            IssueKey = "KIM_GAY"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(348),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(348),
                            Description = "Máy không khởi động hoặc không hoạt động khi bật công tắc.",
                            DisplayName = "Máy Không Chạy",
                            IsCommon = false,
                            IssueKey = "MAY_KHONG_CHAY"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(359),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(360),
                            Description = "Máy bị chảy dầu ra ngoài, ảnh hưởng đến hoạt động.",
                            DisplayName = "Chảy Dầu",
                            IsCommon = false,
                            IssueKey = "CHAY_DAU"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(364),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(364),
                            Description = "Máy phát ra tiếng ồn lớn bất thường khi hoạt động.",
                            DisplayName = "Kêu To",
                            IsCommon = false,
                            IssueKey = "KEU_TO"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(369),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(370),
                            Description = "Máy làm rách vải trong quá trình may.",
                            DisplayName = "Rách Vải",
                            IsCommon = false,
                            IssueKey = "RACH_VAI"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(375),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(376),
                            Description = "Kim không xuyên đúng vị trí gây lỗi đường may.",
                            DisplayName = "Lưỡi Kim",
                            IsCommon = false,
                            IssueKey = "LUOI_KIM"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(380),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(380),
                            Description = "Chỉ bị đứt liên tục trong quá trình sử dụng.",
                            DisplayName = "Đứt Chỉ",
                            IsCommon = false,
                            IssueKey = "DUT_CHI"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(385),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(386),
                            Description = "Máy không cuốn chỉ hoặc chỉ bị rối.",
                            DisplayName = "Không Cuốn Chỉ",
                            IsCommon = false,
                            IssueKey = "KHONG_CUON_CHI"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(390),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(391),
                            Description = "Máy chạy chậm hoặc không đều tốc độ.",
                            DisplayName = "Máy Chạy Chậm",
                            IsCommon = false,
                            IssueKey = "MAY_CHAY_CHAM"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(394),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(395),
                            Description = "Đường chỉ may không đều, lúc chặt lúc lỏng.",
                            DisplayName = "Chỉ Không Đều",
                            IsCommon = false,
                            IssueKey = "CHI_KHONG_DEU"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(402),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(402),
                            Description = "Đèn báo lỗi trên máy may sáng liên tục.",
                            DisplayName = "Đèn Báo Lỗi",
                            IsCommon = false,
                            IssueKey = "DEN_BAO_LOI"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(406),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(407),
                            Description = "Bàn đạp không phản hồi khi sử dụng.",
                            DisplayName = "Bàn Đạp Không Hoạt Động",
                            IsCommon = false,
                            IssueKey = "BAN_DAP_KHONG_HOAT_DONG"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(410),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(411),
                            Description = "Vải bị nhăn hoặc co kéo trong quá trình may.",
                            DisplayName = "Vải Bị Nhăn",
                            IsCommon = false,
                            IssueKey = "VAI_BI_NHAN"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(414),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(415),
                            Description = "Kim may không di chuyển khi máy hoạt động.",
                            DisplayName = "Kim Không Di Chuyển",
                            IsCommon = false,
                            IssueKey = "KIM_KHONG_DI_CHUYEN"
                        },
                        new
                        {
                            Id = new Guid("12121212-1212-1212-1212-121212121212"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(418),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(419),
                            Description = "Ống chỉ bị kẹt hoặc không quay đúng cách.",
                            DisplayName = "Ống Chỉ Lỗi",
                            IsCommon = false,
                            IssueKey = "ONG_CHI_LOI"
                        },
                        new
                        {
                            Id = new Guid("23232323-2323-2323-2323-232323232323"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(422),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(423),
                            Description = "Dây curoa bị lỏng hoặc đứt, gây ngừng máy.",
                            DisplayName = "Dây Curoa Lỗi",
                            IsCommon = false,
                            IssueKey = "DAY_CUROA_LOI"
                        },
                        new
                        {
                            Id = new Guid("34343434-3434-3434-3434-343434343434"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(426),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(428),
                            Description = "Chỉ dưới không được kéo lên đúng cách.",
                            DisplayName = "Chỉ Dưới Lỗi",
                            IsCommon = false,
                            IssueKey = "CHI_DUOI_LOI"
                        },
                        new
                        {
                            Id = new Guid("45454545-4545-4545-4545-454545454545"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(433),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(433),
                            Description = "Máy tự động dừng trong khi đang hoạt động.",
                            DisplayName = "Máy Tự Dừng",
                            IsCommon = false,
                            IssueKey = "MAY_TU_DUNG"
                        },
                        new
                        {
                            Id = new Guid("56565656-5656-5656-5656-565656565656"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(441),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(441),
                            Description = "Nút điều chỉnh độ căng chỉ không hoạt động.",
                            DisplayName = "Nút Điều Chỉnh Lỗi",
                            IsCommon = false,
                            IssueKey = "NUT_DIEU_CHINH_LOI"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MachineCode")
                        .IsUnique()
                        .HasFilter("[MachineCode] IS NOT NULL");

                    b.ToTable("Machines", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("ErrorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("ErrorId");

                    b.HasIndex("MachineId", "ErrorId");

                    b.ToTable("MachineErrorHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccurrenceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasIndex("IssueId");

                    b.HasIndex("MachineId", "IssueId");

                    b.ToTable("MachineIssueHistories");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasFilter("[DeviceId] IS NOT NULL");

                    b.HasIndex("ZoneId");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SerderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SerderId");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("SparepartCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SparepartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("SparepartCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Spareparts_SparepartCode")
                        .HasFilter("[SparepartCode] IS NOT NULL");

                    b.ToTable("Spareparts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2795),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2795),
                            Description = "Kim thép không gỉ dùng cho máy may công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP001",
                            SparepartName = "Kim May Công Nghiệp",
                            Specification = "Loại DBX1, cỡ 90/14",
                            StockQuantity = 150,
                            Unit = "Cái",
                            UnitPrice = 5000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2809),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Dây truyền động cho máy may",
                            IsAvailable = false,
                            SparepartCode = "SP002",
                            SparepartName = "Dây Curoa",
                            Specification = "Chiều dài 1m, bản 10mm",
                            StockQuantity = 60,
                            Unit = "Cái",
                            UnitPrice = 12000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2820),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2821),
                            Description = "Bàn đạp điều khiển tốc độ",
                            IsAvailable = false,
                            SparepartCode = "SP003",
                            SparepartName = "Bàn Đạp Máy",
                            Specification = "Điện áp 220V",
                            StockQuantity = 20,
                            Unit = "Cái",
                            UnitPrice = 45000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2827),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2828),
                            Description = "Ống chỉ nhựa cho máy may tự động",
                            IsAvailable = false,
                            SparepartCode = "SP004",
                            SparepartName = "Ống Chỉ",
                            Specification = "Đường kính 2.5cm",
                            StockQuantity = 500,
                            Unit = "Cái",
                            UnitPrice = 1500m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2833),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2834),
                            Description = "Điều chỉnh nhiệt độ máy may",
                            IsAvailable = false,
                            SparepartCode = "SP005",
                            SparepartName = "Bộ Điều Khiển Nhiệt",
                            Specification = "Tối đa 200°C",
                            StockQuantity = 10,
                            Unit = "Bộ",
                            UnitPrice = 120000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2841),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2841),
                            Description = "Công tắc bật/tắt máy may",
                            IsAvailable = false,
                            SparepartCode = "SP006",
                            SparepartName = "Công Tắc Máy May",
                            Specification = "Công suất 250V - 10A",
                            StockQuantity = 35,
                            Unit = "Cái",
                            UnitPrice = 8000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2848),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2848),
                            Description = "Mô tơ điện cho máy may công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP007",
                            SparepartName = "Mô Tơ Máy May",
                            Specification = "Công suất 370W, điện 220V",
                            StockQuantity = 8,
                            Unit = "Cái",
                            UnitPrice = 350000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2854),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2855),
                            Description = "Đèn chiếu sáng cho khu vực may",
                            IsAvailable = false,
                            SparepartCode = "SP008",
                            SparepartName = "Đèn LED Gắn Máy",
                            Specification = "LED 12V, 5W, dán keo",
                            StockQuantity = 120,
                            Unit = "Cái",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2859),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2860),
                            Description = "Trụ gắn kim thay thế cho đầu máy",
                            IsAvailable = false,
                            SparepartCode = "SP009",
                            SparepartName = "Trụ Gắn Kim",
                            Specification = "Thép hợp kim bền cao",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 22000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000010"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2868),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2868),
                            Description = "Cơ cấu truyền động kim máy may",
                            IsAvailable = false,
                            SparepartCode = "SP010",
                            SparepartName = "Bộ Truyền Kim",
                            Specification = "Cơ khí chính xác cao",
                            StockQuantity = 12,
                            Unit = "Bộ",
                            UnitPrice = 85000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000011"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2873),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2874),
                            Description = "Bộ phận giữ chỉ dưới trong máy may",
                            IsAvailable = false,
                            SparepartCode = "SP011",
                            SparepartName = "Ổ Chỉ Dưới",
                            Specification = "Kim loại bền, chuẩn công nghiệp",
                            StockQuantity = 100,
                            Unit = "Cái",
                            UnitPrice = 10000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000012"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2878),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2879),
                            Description = "Bánh răng dẫn động kim và trụ máy",
                            IsAvailable = false,
                            SparepartCode = "SP012",
                            SparepartName = "Bánh Răng Truyền Động",
                            Specification = "Hợp kim, răng xoắn",
                            StockQuantity = 60,
                            Unit = "Cái",
                            UnitPrice = 30000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000013"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2883),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2884),
                            Description = "Trục truyền động từ mô tơ đến kim",
                            IsAvailable = false,
                            SparepartCode = "SP013",
                            SparepartName = "Trục Kim Máy May",
                            Specification = "Thép tôi cứng, chống mài mòn",
                            StockQuantity = 25,
                            Unit = "Cái",
                            UnitPrice = 40000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000014"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2889),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2889),
                            Description = "Khung giữ ống chỉ phía trên máy",
                            IsAvailable = false,
                            SparepartCode = "SP014",
                            SparepartName = "Giá Đỡ Ống Chỉ",
                            Specification = "Nhựa chịu lực hoặc kim loại",
                            StockQuantity = 80,
                            Unit = "Cái",
                            UnitPrice = 7000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000015"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2894),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2895),
                            Description = "Phụ kiện cảm biến tốc độ quay mô tơ",
                            IsAvailable = false,
                            SparepartCode = "SP015",
                            SparepartName = "Cảm Biến Tốc Độ",
                            Specification = "Điện áp 5V TTL, chuẩn hall sensor",
                            StockQuantity = 15,
                            Unit = "Cái",
                            UnitPrice = 65000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000016"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2900),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2901),
                            Description = "Bộ khung bên ngoài cho máy loại nhỏ",
                            IsAvailable = false,
                            SparepartCode = "SP016",
                            SparepartName = "Khung Máy Nhỏ",
                            Specification = "Nhôm đúc",
                            StockQuantity = 12,
                            Unit = "Bộ",
                            UnitPrice = 90000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000017"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2906),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2906),
                            Description = "Lót chân máy may giảm rung, chống ồn",
                            IsAvailable = false,
                            SparepartCode = "SP017",
                            SparepartName = "Đế Cao Su Chống Rung",
                            Specification = "Cao su tổng hợp, đường kính 5cm",
                            StockQuantity = 150,
                            Unit = "Cái",
                            UnitPrice = 3000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000018"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2915),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2916),
                            Description = "Bánh dẫn puli gắn với động cơ",
                            IsAvailable = false,
                            SparepartCode = "SP018",
                            SparepartName = "Puli Dây Curoa",
                            Specification = "Đường kính 80mm, thép hợp kim",
                            StockQuantity = 30,
                            Unit = "Cái",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000019"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2920),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2921),
                            Description = "Dây cấp nguồn cho mô tơ máy may",
                            IsAvailable = false,
                            SparepartCode = "SP019",
                            SparepartName = "Dây Điện Động Cơ",
                            Specification = "2 lõi, dài 1.5m, bọc cách điện",
                            StockQuantity = 100,
                            Unit = "Cuộn",
                            UnitPrice = 10000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000020"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2926),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2926),
                            Description = "Chắn dầu chống tràn ra khỏi ổ",
                            IsAvailable = false,
                            SparepartCode = "SP020",
                            SparepartName = "Bộ Gương Chắn Dầu",
                            Specification = "Nhựa chịu nhiệt, lắp trong trục máy",
                            StockQuantity = 50,
                            Unit = "Bộ",
                            UnitPrice = 22000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000021"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2983),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2984),
                            Description = "Kim chuyên dụng cho vải dày, da, nỉ",
                            IsAvailable = false,
                            SparepartCode = "SP021",
                            SparepartName = "Kim May Dày",
                            Specification = "Cỡ 100/16, loại DPX17",
                            StockQuantity = 80,
                            Unit = "Cái",
                            UnitPrice = 6000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000022"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2993),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(2994),
                            Description = "Loại dây curoa dự phòng cho máy lập trình",
                            IsAvailable = false,
                            SparepartCode = "SP022",
                            SparepartName = "Dây Curoa Dự Phòng",
                            Specification = "Bản rộng 8mm, răng hình thang",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 15000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000023"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3002),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3004),
                            Description = "Loại đèn LED gắn bên cạnh trục kim",
                            IsAvailable = false,
                            SparepartCode = "SP023",
                            SparepartName = "Đèn Chiếu Sáng Máy May",
                            Specification = "LED trắng 6W, 220V",
                            StockQuantity = 100,
                            Unit = "Cái",
                            UnitPrice = 20000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000024"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3011),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3012),
                            Description = "Cơ cấu điều khiển chân vịt tự động",
                            IsAvailable = false,
                            SparepartCode = "SP024",
                            SparepartName = "Bộ Điều Khiển Chân Vịt",
                            Specification = "Tích hợp cảm biến áp suất",
                            StockQuantity = 18,
                            Unit = "Bộ",
                            UnitPrice = 95000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000025"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3018),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3019),
                            Description = "Ổ chỉ dưới thay thế cho máy Brother",
                            IsAvailable = false,
                            SparepartCode = "SP025",
                            SparepartName = "Ổ Chỉ Dưới (Loại A)",
                            Specification = "Chuẩn A, có lò xo giữ",
                            StockQuantity = 75,
                            Unit = "Cái",
                            UnitPrice = 11000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000026"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3029),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3030),
                            Description = "Thanh truyền động từ bàn đạp đến mô tơ",
                            IsAvailable = false,
                            SparepartCode = "SP026",
                            SparepartName = "Trục Quay Bàn Đạp",
                            Specification = "Thép đặc, dài 30cm",
                            StockQuantity = 25,
                            Unit = "Cái",
                            UnitPrice = 27000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000027"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3035),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3037),
                            Description = "Đế cao su chống trượt cho máy may",
                            IsAvailable = false,
                            SparepartCode = "SP027",
                            SparepartName = "Đế Máy May",
                            Specification = "4 miếng/bộ, cao su EPDM",
                            StockQuantity = 90,
                            Unit = "Bộ",
                            UnitPrice = 18000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000028"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3050),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3051),
                            Description = "Giá đỡ đèn LED trên thân máy",
                            IsAvailable = false,
                            SparepartCode = "SP028",
                            SparepartName = "Khung Gắn Đèn",
                            Specification = "Inox không gỉ",
                            StockQuantity = 40,
                            Unit = "Cái",
                            UnitPrice = 9000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000029"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3057),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3058),
                            Description = "Bo mạch điều khiển trung tâm cho máy điện tử",
                            IsAvailable = false,
                            SparepartCode = "SP029",
                            SparepartName = "Bộ Điều Khiển Điện Tử",
                            Specification = "Mainboard 8-bit MCU",
                            StockQuantity = 5,
                            Unit = "Bộ",
                            UnitPrice = 350000m
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000030"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3064),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2025, 5, 20, 14, 41, 42, 449, DateTimeKind.Utc).AddTicks(3064),
                            Description = "Khung gắn chỉ đứng dùng cho máy công nghiệp",
                            IsAvailable = false,
                            SparepartCode = "SP030",
                            SparepartName = "Giá Đỡ Chỉ Đứng",
                            Specification = "2 trục, cao 60cm",
                            StockQuantity = 55,
                            Unit = "Cái",
                            UnitPrice = 13000m
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeviceReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReportNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AssigneeId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("StaffID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 448, DateTimeKind.Utc).AddTicks(8620),
                            IsDeleted = false,
                            Email = "hod@gmail.com",
                            FullName = "Head of Department",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 1,
                            UserName = "Head of Department"
                        },
                        new
                        {
                            Id = new Guid("32222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 448, DateTimeKind.Utc).AddTicks(8656),
                            IsDeleted = false,
                            Email = "hot@gmail.com",
                            FullName = "Head of Team",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 2,
                            UserName = "Head of Team"
                        },
                        new
                        {
                            Id = new Guid("43333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 448, DateTimeKind.Utc).AddTicks(8662),
                            IsDeleted = false,
                            Email = "staff@gmail.com",
                            FullName = "Staff Member",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 3,
                            UserName = "Staff Member"
                        },
                        new
                        {
                            Id = new Guid("54444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 448, DateTimeKind.Utc).AddTicks(8666),
                            IsDeleted = false,
                            Email = "sk@gmail.com",
                            FullName = "Support Staff",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 4,
                            UserName = "Support Staff"
                        },
                        new
                        {
                            Id = new Guid("65555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 5, 20, 14, 41, 42, 448, DateTimeKind.Utc).AddTicks(8669),
                            IsDeleted = false,
                            Email = "admin@gmail.com",
                            FullName = "Administrator",
                            PasswordHash = "String123!",
                            PhoneNumber = "09785628660",
                            Role = 5,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasBaseType("GRRWS.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AreaId");

                    b.ToTable("Zones", (string)null);
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorDetail", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Report", "Report")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("ErrorDetails")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Error");

                    b.Navigation("Report");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.ErrorSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("ErrorSpareparts")
                        .HasForeignKey("SparepartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.IssueError", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany("IssueErrors")
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("IssueErrors")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RepairSparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Sparepart", "Sparepart")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("SpareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Tasks", "Task")
                        .WithMany("RepairSpareparts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sparepart");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany("RequestIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithMany("RequestIssues")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Device", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany("Devices")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceErrorHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Histories")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceIssueHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarranty", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Warranties")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarranty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.DeviceWarrantyHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.DeviceWarrantyHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.EmailTemplate", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Error", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "User")
                        .WithOne("Feedback")
                        .HasForeignKey("GRRWS.Domain.Entities.Feedback", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Image", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.RequestIssue", "RequestIssue")
                        .WithMany("Images")
                        .HasForeignKey("RequestIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestIssue");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Issue", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Machine", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineErrorHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.MachineErrorHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Error");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.MachineIssueHistory", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.MachineIssueHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Notification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Position", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithOne("Position")
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "DeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Position", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Zone", "Zone")
                        .WithMany("Positions")
                        .HasForeignKey("ZoneId");

                    b.Navigation("Device");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.Request", "Request")
                        .WithOne("Report")
                        .HasForeignKey("GRRWS.Domain.Entities.Report", "RequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Device", "Device")
                        .WithMany("Requests")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Request", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.User", "Sender")
                        .WithMany("Requests")
                        .HasForeignKey("SerderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Device");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Sparepart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.User", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Tasks", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.HasOne("GRRWS.Domain.Entities.Area", "Area")
                        .WithMany("Zones")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GRRWS.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("GRRWS.Domain.Entities.Zone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.RequestIssue", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Area", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Device", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Position");

                    b.Navigation("Requests");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Error", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("ErrorSpareparts");

                    b.Navigation("IssueErrors");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Issue", b =>
                {
                    b.Navigation("IssueErrors");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Machine", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Report", b =>
                {
                    b.Navigation("ErrorDetails");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Request", b =>
                {
                    b.Navigation("Report");

                    b.Navigation("RequestIssues");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Sparepart", b =>
                {
                    b.Navigation("ErrorSpareparts");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Tasks", b =>
                {
                    b.Navigation("ErrorDetails");

                    b.Navigation("RepairSpareparts");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.User", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Requests");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GRRWS.Domain.Entities.Zone", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
